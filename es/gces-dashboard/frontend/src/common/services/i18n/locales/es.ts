export const localeES: any = {
  common: {
    nullDisplay: '[NULL]',
    emptyDisplay: '[Blank]',
    currencyFormat: '$#,##0.00',
    max: 'Max',
    min: 'Min',
    maxValue: 'Max Value',
    minValue: 'Min Value',
    infinity: 'Infinity',
    negativeInfinity: '-Infinity',
    NaN: 'Not a Number',
    on: 'On',
    off: 'Off',
    yes: 'Yes',
    no: 'No',
    true: 'True',
    false: 'False',
    asc: 'Ascending',
    desc: 'Descending',
    noSort: 'No Sort',
    dateFormat: 'MM/DD/YYYY',
    default: 'Default',
    reload: 'Reload',
    builtIn: 'Built-in',
    edit: 'Edit',
    others: 'Others',
  },
  documentType: {
    Unknown: 'Unknown',
    Dashboard: 'Dashboard',
    Dataset: 'Dataset',
    DataSource: 'DataSource',
    Image: 'Image',
    Theme: 'Theme',
    MapHierarchy: 'MapHierarchy',
    GeoJson: 'GeoJson',
    Report: 'Report',
    FloorPlan: 'FloorPlan',
  },
  actions: {
    copy: 'Copy',
    cut: 'Cut',
    paste: 'Paste',
    rename: 'Rename\u2026',
    duplicate: 'Duplicate',
    delete: 'Delete',
    remove: 'Remove',
    hide: 'Hide',
    unhide: 'Unhide',
    undo: 'Undo',
    redo: 'Redo',
    save: 'Save',
    edit: 'Edit',
    reset: 'Reset',
    export: 'Export',
  },
  aggregationMethods: {
    sum: 'Sum',
    cnt: 'Count',
    avg: 'Average',
    max: 'Max',
    min: 'Min',
    dst: 'Distinct Count',
    none: 'None',
    list: 'List',
    fst: 'First',
  },
  aggregationAreas: {
    trellisTable: 'Total Chart',
    trellisRow: 'Trellis Row',
    trellisColumn: 'Trellis Column',
    trellisCell: 'Trellis Cell',
    advanced: 'Advanced',
    dataRole: 'Data Role',
  },
  conditions: {
    equal: 'Equal To',
    notEqual: 'Less Than or Greater Than',
    greater: 'Greater Than',
    equalOrGreater: 'Greater Than or Equal To',
    less: 'Less Than',
    equalOrLess: 'Less Than or Equal To',
    between: 'Between',
    notBetween: 'Not Between',
    and: '~',
    or: 'Or',
  },
  chartTypes: {
    column: 'Column Chart',
    rangeColumn: 'Range Column Chart',
    rangeBar: 'Range Bar Chart',
    rangeArea: 'Range Area Chart',
    stackedColumn: 'Stacked Column Chart',
    percentStackedColumn: 'Percent Stacked Column Chart',
    bar: 'Bar Chart',
    stackedBar: 'Stacked Bar Chart',
    percentStackedBar: 'Percent Stacked Bar Chart',
    line: 'Line Chart',
    area: 'Area Chart',
    stackedArea: 'Stacked Area Chart',
    percentStackedArea: 'Percent Stacked Area Chart',
    pie: 'Pie Chart',
    donut: 'Donut Chart',
    rose: 'Rose Chart',
    sunburst: 'Sunburst Chart',
    barInPolar: 'Bar Chart In Polar Coordinates',
    stackedBarInPolar: 'Stacked Bar Chart In Polar Coordinates',
    radialStackedBar: 'Radial Stacked Bar Chart',
    radar: 'Radar Chart',
    filledRadar: 'Filled Radar Chart',
    scatter: 'Scatter',
    bubble: 'Bubble Chart',
    combined: 'Combined Chart',
    map: 'Map',
    treeMap: 'Treemap',
    funnel: 'Funnel',
    gauge: 'Gauge',
    indicator: 'Indicator',
    kpi: 'KPI Chart',
    floorPlan: 'Floor Plan',
    pivotTable: 'Pivot Table',
    spreadSource: 'Calc Chart',
    multiSource: 'Multi-Source Chart',
  },
  components: {
    pivotTable: 'Pivot Table',
    rawDataTable: 'Data Table',
    kpiMatrix: 'KPI Matrix',
    webContent: 'Embedded Web Content',
    container: 'Container',
    tabContainer: 'Tab Container',
    image: 'Image',
    richText: 'Rich Text',
    labelSlicer: 'Label Slicer',
    treeSlicer: 'Multi-dimensional Slicer',
    comboSlicer: 'Multi-dimensional Dropdown Slicer',
    dateRangeSlicer: 'Date Range Slicer',
    relativeDateSlicer: 'Relative Dates Slicer',
    dataRangeSlicer: 'Data Range Slicer',
    devTools: 'Dev Tools',
  },
  sortTypes: {
    auto: 'Items',
    value: 'Value',
    manual: 'Manual',
    column: 'Field',
  },
  lineTypes: {
    solid: 'Solid',
    dashed: 'Dashed',
  },
  linkTypes: {
    inner: 'Internal Link',
    outer: 'External Link',
    none: 'No Link',
  },
  fontTypes: {
    default: 'Default',
    serif: 'Serif',
    sansSerif: 'Sans-Serif',
  },
  appBar: {
    defaultTitle: 'Untitled',
    unsaved: 'Unsaved',
    crossFilter: 'Cross Filter',
    crossFilter_pattern: 'Cross Filter: {{state}}',
    togglePageTab: 'Show/Hide Page Tab',
    displayMode: {
      auto: 'Auto',
      custom: 'Custom',
      fitToScreen: 'Fit to Screen',
      fitToContainer: 'Fit to Container',
      fitToWidth: 'Fit to Width',
      fitToHeight: 'Fit to Height',
      fitToPage: 'Fit to Page',
    },
    slideShow: 'Slide Show',
    refresh: 'Refresh',
    preview: 'Preview',
    documentSetting: 'Document Settings',
    autoLayout: 'Auto Layout',
    customLayout: 'Custom Layout',
    stretch_pattern: 'Stretch Content: {{state}}',
    dataBinding: 'Data Binding',
    inspector: 'Inspector',
    scenarioList: 'Scenario List',
    scenarioList_empty: 'All elements are on the page.',
    support: 'Help & Support',
    back: 'Back',
    exit: 'Exit',
    interactionSetting: 'Interaction Setting',
    showGridLine: 'Show Grid Line',
    hideGridLine: 'Hide Grid Line',
    mobileDesigner: 'Mobile Designer',
    webDesigner: 'Web Designer',
    pageBack: 'Back',
    enableOverlap: 'Enable Overlap',
    disableOverlap: 'Disable Overlap',
    expand: 'Expand Inspector',
    collapse: 'Collapse Inspector',
    crossFilterMode: {
      off: 'Off',
      singleSource: 'Single Source',
      multiSource: 'Multi-Source',
    },
  },
  menuBar: {
    title: 'Dashboard',
    categories: {
      charts: {
        title: 'Data Visualization',
        groups: {
          charts: 'Charts',
          tables: 'Tables',
          maps: 'Maps',
          advanced: 'Advanced',
        },
      },
      components: {
        title: 'Components',
        groups: {
          containers: 'Containers',
          components: 'Components',
        },
      },
      slicers: {
        title: 'Slicers',
        builtInTitle: 'Built-in Slicers',
        customTitle: 'Custom Slicers',
      },
      visuals: {
        title: 'Custom Visualization',
        placeholder: 'No custom visualization available',
        searchPlaceholder: 'Search...',
        smallIcons: 'Small Icons',
        largeIcons: 'Large Icons',
        list: 'List',
      },
    },
  },
  dataBindingPanel: {
    chooseDataset: 'Choose Dataset',
    loadingDatasetList: 'Loading dataset list from server...',
    loadDatasetListFailed: 'Failed to load dataset list from server!',
    searchField: 'Search...',
    measures: 'Measures',
    dimensions: 'Dimensions',
    bindingHint: 'Please select a dataset from the above list for data binding.',
    values: 'Values',
    lower: 'Lower Value',
    upper: 'Upper Value',
    leftValue: 'Left Value Axis',
    rightValue: 'Right Value Axis',
    axis: 'Axis (Category)',
    axis_x: 'X Axis',
    axis_y: 'Y Axis',
    legend: 'Legend (Series)',
    category: 'Category',
    details: 'Details',
    rows: 'Rows',
    columns: 'Columns',
    location: 'Region',
    latitude: 'Latitude',
    longtitude: 'Longitude',
    layers: 'Layers',
    mapTiles: 'Regions',
    scatter: 'Points',
    color: 'Color',
    size: 'Size',
    shape: 'Shape',
    trellisRows: 'Trellis Rows',
    trellisColumns: 'Trellis Columns',
    tooltip: 'Tooltip',
    mainValue: 'Actual Value',
    comparisonValue: 'Target Value',
    forecastValue: 'Forecast Value',
    imageSource: 'Image Source',
    pivotSettingHint: 'Drag data fields here.',
    pivotSettingHintRunTime: 'Click + to add fields here.',
    aggregationMethod: 'Aggregation Method',
    editName: 'Rename\u2026',
    editFormat: 'Edit Format\u2026',
    deleteFormat: 'Delete Format',
    createHierarchy: 'Create Hierarchy Field\u2026',
    editHierarchy: 'Edit Hierarchy Field\u2026',
    deleteHierarchy: 'Delete Hierarchy Field',
    editNameHierarchyItem: 'Rename\u2026',
    deleteHierarchyItem: 'Remove',
    exactDate: 'Exact Date',
    ymd: 'Year/Month/Day',
    yq: 'Year/Quarter',
    ym: 'Year/Month',
    yw: 'Year/Week',
    runningCalculation: 'Running Calculation\u2026',
    movingCalculation: 'Moving Calculation\u2026',
    origin: 'Original Value',
    addMoMCalculation: 'MoM Calculation',
    addYoYCalculation: 'YoY Calculation',
    accountingCalculation: 'Percentile Calculation\u2026',
    rankingCalculation: 'Ranking Calculation\u2026',
    addAccountingCalculation: 'Percentile Calculation',
    addRankingCalculation: 'Ranking Calculation',
    totalRanking: 'Total Ranking',
    groupRanking: 'Group Ranking',
    totalAccounting: 'Total Percentile',
    groupAccounting: 'Group Percentile',
    dateCalcualtionHint: 'Need a date column to enable this.',
    advanced: 'Advanced\u2026',
    filter: 'Filter\u2026',
    value: 'Value',
    ratio: 'Ratio',
    difference: 'Difference',
    percentDifference: 'Percent Difference',
    slicerColumn: 'Columns',
    search: 'Search...',
    loadFinished: 'Finished',
    loadWaitting: 'Waiting',
    loadFailed: 'Failed',
    seriesAxisLabel: 'Axis',
    seriesAxis: {
      both: 'Both Axis',
      left: 'Left Axis',
      right: 'Right Axis',
    },
    quickFunction: 'Quick Functions',
    pastValue: 'Past Value',
    pastYear: 'Past Year',
    pastQuarter: 'Past Quarter',
    pastMonth: 'Past Month',
    pastWeek: 'Past Week',
    changeOverTime: 'Change Over Time',
    growthRate: 'Growth Rate',
    fromPreviousPeriod: 'From Previous Period',
    fromSamePeriodPreviousYear: 'Same Period, YoY',
    fromSamePeriodPreviousQuarter: 'Same Period, QoQ',
    fromSamePeriodPreviousMonth: 'Same Period, MoM',
    fromSamePeriodPreviousWeek: 'Same Period, WoW',
    fromSamePeriodPreviousYearPercent: 'Same Period, YoY%',
    fromSamePeriodPreviousQuarterPercent: 'Same Period, QoQ%',
    fromSamePeriodPreviousMonthPercent: 'Same Period, MoM%',
    fromSamePeriodPreviousWeekPercent: 'Same Period, WoW%',
    changeOverTimePercent: '% Change Over Time',
    dateBasedFunctions: 'Date Based Functions...',
    growth: 'Growth',
    singleValue: 'Number',
    Image: 'Image',
    bulletGraph: 'Bullet Graph',
    paretoGraph: 'Pareto Graph',
    hBarGraph: 'HBar Graph',
    diagram: 'Diagram',
    trend: 'Trend',
    bar: 'Bar',
    area: 'Area',
    winLoss: 'Win-Loss',
    number: 'Number',
    editText: 'Edit',
    alignmentSetting: 'Text Alignment',
    sparklineSetting: 'Settings\u2026',
    moveUp: 'Move Up',
    moveDown: 'Move Down',
    collapse: 'Collapse',
    expand: 'Expand',
    floorPlanArea: 'Area',
    floorPlanColor: 'Color',
    renderSetting: 'Render Setting',
  },
  inspector: {
    searchBoxPlaceholder: 'Enter property name here...',
    warning: 'The property configuration is incorrect, please check the capabilities.options',
    categories: {
      general: 'General',
      layout: 'Layout',
      appearance: 'Appearance',
      documentAppearance: 'Document Appearance',
      globalSettings: 'Global Settings',
      title: 'Title',
      dataLabel: 'Data Labels',
      legend: 'Legend',
      axis_category: 'Axis(Category)',
      axis_value: 'Value Axis',
      axis_value1: 'Value Axis 1',
      axis_value2: 'Value Axis 2',
      axis_x: 'X-Axis',
      axis_y: 'Y-Axis',
      chartStyle: 'Chart Style',
      content: 'Content',
      grandTotal: 'Grand Totals',
      subTotal: 'Sub Totals',
      rowHeader: 'Row Headers',
      columnHeader: 'Column Headers',
      header: 'Header',
      tabStrip: 'Tab Strip',
      activeTab: 'Active Tab',
      link: 'Link',
      mapStyle: 'Map Style',
      interaction: 'Interaction',
      labelStyle: 'Label Style',
      dataLabelStyle: 'Data Label Style',
      deltaLabelStyle: 'Comparison Label Style',
      percentageLabelStyle: 'Percentage Label Style',
      subTitleLabelStyle: 'Sub Title Style',
      valueSetting: 'Value Setting',
      rangeSetting: 'Range Setting',
      webContent: 'Web Content',
      switchMap: 'Switch Map',
      switchFloorPlan: 'Switch Floor Plan',
      carousel: 'Carousel',
      datePickerDefaultSetting: 'Date Picker Default Setting',
      tableSetting: 'Table Setting',
      tableStyleTemplate: 'Style Template',
      tables: {
        corner: 'Corner Area',
        columnHeader: 'Column Headers',
        rowHeader: 'Row Headers',
        subTotals: 'Sub Totals Area',
        grandTotals: 'Grand Totals Area',
        firstDataStripe: 'First Data Stripe',
        secondDataStripe: 'Second Data Stripe',
      },
      activeTabSetting: 'Active Tab Setting',
      inactiveTabSetting: 'Inactive Tab Setting',
      values: 'Values',
      menuSetting: 'Menu Setting',
      data: 'Data',
      devConfig: 'Dev Tools Setting',
      trellis: 'Trellis',
      tooltip: 'Tooltip',
    },
    properties: {
      common: {
        dashboardFilters: 'Global Filters',
        parameters: 'Parameters',
        crossFilter: 'Cross Filter',
        crossFilterMode: 'Cross Filter Mode',
        jumpToDocuments: 'Jump To',
        foregroundColor: 'Foreground Color',
        backgroundColor: 'Background Color',
        backgroundImage: {
          src: 'Background Image',
          repeat: 'Repeat',
          size: 'Size',
          hAlign: 'H-Align',
          vAlign: 'V-Align',
        },
        imageRepeat: {
          none: 'No Repeat',
          repeat: 'Repeat',
          x: 'RepeatX',
          y: 'RepeatY',
          space: 'Space',
          round: 'Round',
        },
        imageSize: {
          original: 'Original',
          contain: 'Contain',
          cover: 'Cover',
          stretch: 'Stretched',
        },
        autoPlay: 'Auto Play',
        autoPlayInterval: 'Auto Play Interval (seconds)',
        pageSwitchAnimation: 'Page Switch Animation',
        autoRefresh: 'Auto Refresh',
        autoRefreshInterval: 'Refresh Interval',
        autoRefreshType: {
          none: 'None',
          polling: 'Polling',
          realTime: 'Real Time',
        },
        promptUsingMobileView: 'Prompt Using Mobile View',
        showTitle: 'Show Title',
        autoTitle: 'Auto Title',
        title: 'Title',
        alignment: 'Alignment',
        titleTextStyle: 'Title Font Setting',
        legendTextStyle: 'Legend Font Setting',
        hAlign: {
          left: 'Left',
          center: 'Center',
          right: 'Right',
        },
        vAlign: {
          top: 'Top',
          middle: 'Middle',
          bottom: 'Bottom',
        },
        position: 'Position',
        surroundingPosition: {
          top: 'Top',
          right: 'Right',
          bottom: 'Bottom',
          left: 'Left',
        },
        showSizeLegend: 'Show Size Legend',
        border: {
          label: 'Border',
          color: 'Border Color',
          type: {
            label: 'Border Type',
            none: 'None',
            default: 'Default',
            roundCorner: 'Round Corner',
            thickCorner: 'Thick Corner',
            doubleBorder: 'Double Border',
            stylishBorder_1: 'Stylish Border 1',
            stylishBorder_2: 'Stylish Border 2',
          },
          size: {
            label: 'Border Size',
            thin: 'Thin',
            medium: 'Medium',
            thick: 'Thick',
          },
        },
        font: {
          title: 'Font',
        },
        contentTextStyle: 'Content Font Setting',
        headerTextStyle: 'Header Font Setting',
        tabStripTextStyle: 'Font Setting',
        padding: 'Padding',
        margin: 'Margin',
        style: 'Style',
        linkType: 'Link Type',
        url: 'Url',
        targetPage: 'Target Page',
        format: 'Format',
        orientation: {
          title: 'Orientation',
          horizontal: 'Horizontal',
          vertical: 'Vertical',
          diagonal: 'Diagonal',
          auto: 'Auto',
        },
        auto: 'Auto',
        shadow: {
          label: 'Shadow',
          color: 'Shadow Color',
          type: {
            label: 'Shadow Type',
            none: 'None',
            both: 'Both',
            inner: 'Inner',
            outer: 'Outer',
          },
          size: {
            label: 'Shadow Size',
            thin: 'Thin',
            medium: 'Medium',
            thick: 'Thick',
          },
        },
        scenarioStyle: {
          batchSetting: 'Batch Setting Style',
          label: 'Style Template',
        },
        connectingLineColor: 'Connecting Line Color',
        scrollbarMode: 'Scrollbar Mode',
        tableAlignment: 'Text Alignment',
        fontStyle: {
          title: 'Font Style',
          Normal: 'Normal',
          Italic: 'Italic',
        },
        fontWeight: {
          title: 'Font Weight',
          Normal: 'Normal',
          Bold: 'Bold',
          Heavy: 'Heavy',
          Light: 'Light',
        },
        fontColor: 'Font Color',
        fontLabelOfTitle: 'Title Font Setting',
        fontLabelOfContent: 'Content Font Setting',
        fontSize: 'Font Size',
        fontFamily: 'Font Family',
        pinAnnotation: 'Pin Annotation',
        visibleMenuItems: 'Visible Menu Items',
        scenarioName: 'Scenario Name',
      },
      dashboard: {
        theme: 'Theme',
        autoFontSize: 'Self-adaptive Font Size',
        scenarioBackgroundColor: 'Scenario Background Color',
        border: 'Border',
        shadow: 'Shadow',
        pageTabStripVisible: 'Pagination Visibility',
        pageTabStripStyle: {
          title: 'Pagination Style',
          tabs: 'Tabs',
          navigator: 'Navigator',
        },
        animationType: {
          fadeIn: 'Fade in',
          slide: 'Slide',
        },
        pageTabStripPosition: 'Pagination Position',
        showPageBorder: 'Show Page Border',
        documentRatio: 'Document Ratio',
        stretch: 'Stretch To Fit Ratio',
        pageFitMode: 'Page Size',
        fixedSize: 'Fixed Size',
        pageWidth: 'Page Width',
        pageHeight: 'Page Height',
        palette: 'Palette',
        cornerRadius: 'Corner Radius',
        snapToGrid: 'Snap To Grid',
        snap2Guides: 'Snap To Guides',
        graphOpacity: 'Graph Opacity',
        snap: 'Snap',
        autoGradient: 'Auto Gradient',
      },
      charts: {
        dataLabel: {
          showDataLabel: 'Show Data Label',
          displayUnit: 'Display Unit',
          value: 'Value',
          size: 'Size',
          color: 'Color',
          shape: 'Shape',
          location: 'Location',
          series: 'Series Name',
          category: 'Category Name',
          displayMode: {
            title: 'Display Mode',
            auto: 'Auto',
            all: 'All',
            smart: 'Smart',
          },
          position: {
            around: 'Around',
            onSlice: 'On Slice',
            auto: 'Auto',
          },
          percentageDisplay: 'Value As Percentage',
          details: 'Details',
          dataLabelTextStyle: 'Data Label Font Setting',
          area: 'Area',
          yPlacement: {
            title: 'Relative Position To Category',
            near: 'Near',
            center: 'Center',
            far: 'Far',
          },
          xPlacement: {
            title: 'Relative Position To Value Axis',
            near: 'Near',
            center: 'Center',
            far: 'Far',
          },
          angle: {
            title: 'Direction',
            horizontal: 'Horizontal',
            perpendicularToY: 'Perpendicular To Value Axis',
            parallelToY: 'Parallel To Value Axis',
          },
          connectingLineMode: {
            title: 'Connecting Line Mode',
            none: 'None',
            always: 'Always',
            auto: 'Auto',
          },
          connectingLineWidth: {
            title: 'Line Width',
            thin: 'Thin',
            medium: 'Medium',
            thick: 'Thick',
          },
          xOffset: 'Offset Along Category',
          yOffset: 'Offset Along Value Axis',
          showShape: 'Show Shape',
          shapeImage: 'Shape Image',
          shapeXCenter: 'Shape X-Center',
          shapeYCenter: 'Shape Y-Center',
          shapeXScale: 'Shape X-Scale',
          shapeYScale: 'Shape Y-Scale',
        },
        showLegend: 'Show Legend',
        legendWrap: 'Wrap Legend',
        legendAutoSize: 'Auto Size',
        legendHAlign: 'H-Align',
        legendVAlign: 'V-Align',
        legendWidth: 'Width',
        legendHeight: 'Height',
        axis: {
          showAxis: 'Show Axis',
          showAxisLine: 'Show Axis Line',
          showGridLine: 'Show Grid Lines',
          gridLineColor: 'Grid Line Color',
          showTickLabel: 'Show Tick Labels',
          showTickMark: 'Show Tick Marks',
          lableDirection: 'Label Direction',
          categoryOrigin: 'Intersection',
          maxValue: 'Max Value',
          minValue: 'Min Value',
          interval: 'Interval',
          dataFormat: 'Data Format\u2026',
          displayUnit: 'Display Unit',
          showUnitsLabel: 'Show units\' label',
          unitsLabelPosition: 'Unit Label Position',
          labelPosition: {
            onTitle: 'On Title',
            onScale: 'On Scale',
          },
          formats: {
            general: 'General',
            number: 'Number',
            currency: 'Currency',
            percentage: 'Percentage',
            custom: 'Custom',
          },
          scaleType: 'Scale',
          scaleTypes: {
            Linear: 'Linear',
            Ordinal: 'Ordinal',
            Percentage: 'Percentage',
            Logarithmic: 'Logarithmic',
          },
          axisTextStyle: 'Axis Font Setting',
        },
        displayUnit: {
          auto: 'Auto',
          none: 'None',
          e2: 'Hundreds',
          e3: 'Thousands',
          e4: '10K',
          e5: '100K',
          e6: 'Millions',
          e7: '10M',
          e8: '100M',
          e9: 'Billions',
          e12: 'Trillions',
        },
        autoGapWidth: 'Auto Gap Width',
        categoryGapWidth: 'Category Gap %',
        seriesGapWidth: 'Series Gap %',
        showTooltip: 'Show Tooltip',
        tooltipMode: {
          title: 'Tooltip Mode',
          none: 'None',
          dataPointTooltip: 'Data Point',
          categoryTooltip: 'Category',
        },
        showCategoryTrackingArea: 'Show Category Tracking Area',
        categoryTrackingAreaColor: 'Tracking Area Color',
        showCategoryTrackingLine: 'Show Category Tracking Line',
        categoryTrackingLineColor: 'Tracking Line Color',
        categoryTrackingLineType: 'Tracking Line Type',
        categoryTrackingLineWidth: 'Tracking Line Width',
        showPointTrackingCrossX: 'Show Point Cross Value Axis',
        pointTrackingCrossXWidth: 'Cross Value Axis Line Width',
        pointTrackingCrossXType: 'Cross Value Axis Line Type',
        pointTrackingCrossXColor: 'Cross Value Axis Line Color',
        showPointTrackingCrossY: 'Show Point Cross Category Axis',
        pointTrackingCrossYWidth: 'Cross Category Axis Line Width',
        pointTrackingCrossYType: 'Cross Category Axis Line Type',
        pointTrackingCrossYColor: 'Cross Category Axis Line Color',
        showDots: 'Show Dots',
        innerRadias: 'Inner Radius',
        startAngle: 'Start Angle',
        sweep: 'Sweep',
        axisMode: {
          title: 'AxisMode',
          cartesian: 'Cartesian',
          radial: 'Radial',
          polygonal: 'Polygonal',
        },
        lineStyle: {
          title: 'Line Style',
          default: 'Default',
          spline: 'Spline',
          step: 'Step',
        },
        showNull: {
          title: 'Show Nulls as',
          connect: 'Connected',
          gap: 'Gaps',
          zero: 'Zeros',
        },
        showNullItems: 'Show Null',
        showEmptyStringItems: 'Show Blank',
        gradientColor: 'Base Color',
        graphColorPreference: 'Preferred Graph Color',
        gradientColorGroupNumber: 'Range Count',
        topWidth: 'Top Width',
        bottomWidth: 'Bottom Width',
        neckHeight: 'Neck Height',
        regionalBorderColor: 'Regional Border',
        palette: 'Palette',
        themeColor: 'Theme',
        standardColor: 'Standard',
        customColor: 'Custom',
        customPalette: {
          create: 'Create New Palette',
          customPaletteMode: {
            customColor: 'Custom Color',
            fromGradientColor: 'Gradient Series',
            gradientColor: 'Gradient Color',
          },
          paletteColor: 'Palette Colors',
          mode: 'Mode',
          gradientColor: 'Gradient Color',
          color: 'Color',
          paletteColorNumber: 'Palette Color Number',
          paletteColorPreview: 'Palette Color Preview',
          style: 'Style',
        },
        calibrationType: {
          title: 'Calibration Type',
          complete: 'Complete',
          boundary: 'Boundary',
          hide: 'Hide',
        },
        pointerColor: 'Pointer Color',
        valueCustomUnit: 'Custom Unit',
        valueCustomUnitTextStyle: 'Custom Unit Font Setting',
        valueSource: 'Actual Value Source',
        comparisonSource: 'Target Value Source',
        valueCustomInput: 'Value',
        comparisonCustomInput: 'Value',
        valueSourceType: {
          fromDataset: 'Dataset',
          fromCustomInput: 'Custom Input',
        },
        percentageOfComparison: 'Percentage of Comparison',
        rangeDotType: 'Value Type',
        rangeDotTypeEnums: {
          precentage: 'Percentage',
          constant: 'Constant',
        },
        gaugeAxisType: 'Axis Type',
        gaugeAxisTypeEnums: {
          precentage: 'Percentage',
          constant: 'Constant',
        },
        rangeDotsAndColorslabel: 'Range Color',
        rangePattern: {
          high: 'High',
          mid: 'Mid',
          low: 'Low',
        },
        gaugeValueCustomInput: '',
        emptyValue: '',
        showDeltaSymbol: 'Show Symbol',
        showDeltaPercentage: 'Show Percentage',
        showPercentage: 'Show Percentage',
        showSubTitle: 'Show Sub Title',
        customSubTitle: 'Sub Title',
        subTitleFontSetting: 'Sub Title Font Setting',
        showDeltaLabel: 'Show Label',
        showPercentageLabel: 'Show Percentage Label',
        percentageLabelTextStyle: 'Percentage Label Font Setting',
        deltaLabelTextStyle: 'Label Font Setting',
        isMutativeReachedColor: 'Interval Range Color',
        unreachedColor: 'Dial Background Color',
        reachedColor: 'Dial Foreground  Color',
        conditionalFormatType: 'Conditional Format Style',
        conditionalFormatTypeEnums: {
          noBackground: 'Delta Label Text Color',
          deltaLabelBackground: 'Delta label Background color',
          fullBackground: 'Full Background',
        },
        colorPerfrence: 'Color Preference',
        colorPerfrenceEnums: {
          palette: 'Palette',
          gradient: 'Gradient',
        },
        gradientPerfrence: 'Gradient Preference',
        gradientPerfrenceEnums: {
          gradual: 'Gradual',
          grouped: 'Grouped',
        },
        fontStyle: 'Font Style',
        fontWeight: 'Font Weight',
        fontStyleEnums: {
          Normal: 'Normal',
          Italic: 'Italic',
        },
        fontWeightEnums: {
          Normal: 'Normal',
          Bold: 'Bold',
          Lighter: 'Lighter',
        },
        cornerRadius: 'Corner Radius',
        graphOpacity: 'Graph Opacity',
        map: 'Map',
        automaticCarousel: 'Automatic Carousel',
        carouselInterval: 'Interval (seconds)',
        singleSelection: 'Single Selection',
        autoGradient: 'Auto Gradient',
        calculationMode: 'Calculation Mode',
        calculationModeEnums: {
          delta: 'Delta',
          ratio: 'Ratio',
        },
        floorPlan: 'FloorPlan',
        areaBorderColor: 'Area Border',
        reverseColor: 'Reverse Color',
        showTopN: 'Top N Grouping',
        topN: 'Show',
        trellis: {
          padding: 'Trellis Padding',
          borderColor: 'Trellis Border Color',
          textStyle: 'Trellis Font Setting',
        },
        maintainColorAssignments: 'Maintain Color Assignments',
        colorAssignments: 'Color Assignments',
        colorAssignmentsManage: 'Manage...',
      },
      tables: {
        pageCapacity: 'Page Capacity',
        grandTotalSettings: 'GrandTotal Settings',
        grandTotalMode: {
          title: 'Display Mode',
          both: 'Rows And Columns',
          rows: 'Only On Rows',
          columns: 'Only On Columns',
          none: 'None',
        },
        grandTotalFrozenSetting: {
          title: 'Lock Grand Total',
          row: 'Lock Row Only',
          column: 'Lock Column Only',
          both: 'Lock Row And Column',
          none: 'None',
        },
        subTotalMode: {
          title: 'Display Mode',
          visible: 'Visible',
          hidden: 'Hidden',
        },
        gridLineColor: 'Grid Line Color',
        rowHeight: 'Row Height',
        freezeRowHeader: 'Freeze Row Headers',
        highlightCustomData: 'Highlight Custom Data',
        autoScroll: 'Auto Scroll',
        autoPageTurning: 'Page Turning',
        autoScrollSpeed: {
          slow: 'Slow',
          normal: 'Normal',
          fast: 'Fast',
          name: 'Speed',
        },
        autoScrollSwitch: {
          on: 'On',
          off: 'Off',
        },
        scrollbarMode: {
          Auto: 'Auto',
          Hidden: 'Hidden',
          Visible: 'Visible',
          Hover: 'Hover To Display',
        },
        alignmentSettings: {
          default: 'Auto',
          left: 'Left',
          center: 'Center',
          right: 'Right',
        },
        renderSettings: {
          text: 'Text',
          image_url: 'Image URL',
          image_binary: 'Image Content',
        },
        displayUnit: 'DisplayUnit',
        showDataOnTooltip: 'Show Data On Tooltip',
        tableTemplates: 'Tabular Style Templates',
        whole: 'Whole Table',
        cornerHeader: 'Corner Header',
        colHeader: 'Column Header',
        rowHeader: 'Row Header',
        data: 'Data',
        firstDataStripe: 'First Data Stripe',
        secondDataStripe: 'Second Data Stripe',
        subTotals: 'Sub Totals',
        grandTotals: 'Grand Totals',
        addNewStyle: 'Add New Style...',
        light: 'Light',
        medium: 'Medium',
        dark: 'Dark',
        custom: 'Custom',
        name: 'Name',
        tableElements: 'Table Elements',
        baseStyle: 'Base Style',
        invalidTemplateName: 'Duplicated Or Invalid Style Template Name',
        textStyle: 'Text Style',
        fillColor: 'Fill Color',
        borderColor: 'Border Color',
        wholeTableBorderColor: 'Cell Border Color',
        preview: 'Preview',
        hideBorder: 'Hide Border',
        backColor: 'Background Color',
        wholeTableBackColor: 'Cell Background Color',
        useAlternateRowStyle: 'Use Alternate Row Style',
        treatLastRowHeaderAsData: 'Last Row Header As Data',
        baseCustomStyleTemplate: 'Custom Style',
        colHeaderVisible: 'Show Column Header',
        enableWordWrap: 'Word Wrap',
        scrollPattern: 'Smooth Scroll',
        enableUiFilter: 'Show Quick Filter',
        autoFitMode: {
          label: 'AutoFit Column Width',
          useColHeader: 'Fit To Header',
          useContent: 'Fit To Content',
        },
        showRowNumber: 'Show Row Number',
        rowNumberInsertPosition: {
          title: 'Number Rows For',
          first: 'Top Row Group',
          last: 'Detail Rows',
          all: 'All',
        },
        rowNumberCountRule: {
          title: 'Row Number Scope',
          global: 'Global',
          region: 'Row Group',
          page: 'Page',
        },
        rowNumberAdjoin: {
          title: 'Row Number Position',
          before: 'Before',
          after: 'After',
        },
      },
      slicers: {
        selectionMode: {
          title: 'Selection Mode',
          single: 'Single',
          multiple: 'Multiple',
        },
        wrapItems: 'Wrap Items',
        widthAdaptive: 'Width Adaptive',
        orientation: 'Orientation',
        titlePosition: {
          title: 'Position',
          outside: 'Outside',
          inline: 'Inline',
        },
        lablesLayout: {
          label: 'Labels',
          list: 'List',
          buttonGroup: 'Button Group',
        },
        dataRangeLayout: {
          input: 'Input Box',
          slider: 'Slider',
          both: 'Input Box + Slider',
        },
        defaultDateRangeMode: 'Date Mode',
        defaultIsExpanded: 'Expanded Mode',
      },
      containers: {
        tabStripMode: 'Tab Display Mode',
        showSplitLine: 'Show Split Line',
        tabName: 'Tab Name',
        mobileAutoLayoutPolicy: 'Mobile Auto Layout Policy',
        flow: 'Flow',
        scale: 'Scale',
        filterScope: 'Filter Scope',
        filterScope_container: 'Container',
        filterScope_global: 'Global',
        tabStripAlignment: {
          label: 'Tab Alignment',
          left: 'Left',
          right: 'Right',
          center: 'Center',
        },
        tabStripGap: 'Gap Between Tab',
        activeTabBorderColor: 'Border Color',
        inActiveTabBorderColor: 'Border Color',
        activeTabIndicatorColor: 'Indicator Color',
        tabTextColor: 'Text Color',
        tabTextAlignment: {
          label: 'Tab Text Alignment',
          left: 'Left',
          center: 'Center',
          right: 'Right',
        },
        tabStripVisible: 'Show Tab Strip',
        inActiveTabBackColor: 'Background',
        activeTabBackColor: 'Background',
        tabWidth: {
          label: 'Tab Width Mode',
          input: 'Tab Width',
          fixed: 'Fixed',
          auto: 'Auto',
          distribute: 'Distribute',
        },
        tabStripeBorderColor: 'Border Color',
      },
      image: {
        source: 'Source',
      },
      richText: {
        contentVerticalMiddle: 'Vertical Align Middle',
      },
      webContent: {
        customSetting: 'Custom Setting',
        enableToken: 'Pass User Token',
      },
      devConfig: {
        port: 'Port',
      },
    },
  },
  dialogs: {
    common: {
      apply: 'Apply',
      reset: 'Reset',
      yes: 'Yes',
      no: 'No',
      ok: 'OK',
      cancel: 'Cancel',
      close: 'Close',
    },
    syncChanges: {
      title: 'Sync Changes',
      content: 'There are analytical operations performed during preview (filter, sort, etc.). Would you like to sync the changes?',
    },
    unsavedChanges: {
      title: 'Unsaved Change Detected',
      content: 'There are unsaved changes detected. Would you like to recover the changes?',
      restore: 'Restore',
      discard: 'Discard',
    },
    leavePrompt: {
      title: 'Unsaved Change Detected',
      content: 'Unsaved changes detected. Would you like to proceed?',
    },
    saveDashboard: {
      title: 'Save Dashboard',
      name: 'Dashboard Name',
      categories: 'Categories',
      description: 'Comment',
      loadingServerTagList: 'Loading tags...',
      loadServerTagListFailed: 'Failed to load tags!',
      placeHolder_name: 'Enter dashboard name here',
      placeHolder_description: 'Enter comment here',
      placeHolder_comment: 'Enter comment here',
    },
    exportDashboard: {
      title: 'Export',
      fileType: 'Export Format',
      fileTypeItems: {
        pngImage: 'PNG Image',
        pptDocument: 'PPT',
      },
      actionBarDropdownList: {
        pngImage: 'Export PNG image',
        data: 'Export Data',
      },
      pages: 'Pages',
      pagesOptions: {
        currentPage: 'Current Page',
        allPages: 'All Pages',
        allVisiblePages: 'Visible Pages',
        customPages: 'Custom Pages',
      },
      exportTo: 'Export To',
      exportToItems: {
        singleImage: 'Single Image',
        separatedPages: 'Separated Pages',
      },
      invisible: 'Invisible',
      combinedChartSheetName: {
        left: 'Left Axis',
        right: 'Right Axis',
      },
    },
    cancelExport: {
      title: 'Exporting, please wait a moment...',
      page: 'Pages Exported',
      exportProgress: 'Export Progress',
    },
    changeChartType: {
      title: 'Change Chart Type',
    },
    noSpaceForTitle: {
      title: 'Not Enough Space',
      content: 'The container title cannot be displayed. Adjust the container size to make more space.',
    },
    noSpaceForTabStrip: {
      title: 'Not Enough Space',
      content: 'The container tabStrip cannot be displayed. Adjust the container size to make more space.',
    },
    filter: {
      title: 'Filter',
      add: 'Add a Filter',
      hint: 'There is no filter added for this scenario. Please click the button above to add a filter.',
      targetField: 'Target Field',
      exclude: 'Exclude Matched',
      selectAll: '(All)',
      selectNone: '(None)',
      startDate: 'Start Date',
      endDate: 'End Date',
      dateUnit: 'Date Unit',
      bindToParameter: 'Bind To',
      matchType: 'Match Type',
      caseSensitive: 'Case Sensitive',
      matchValue: 'Match Value',
      typeKeyWord: 'Type Keyword...',
      excludePattern: 'Exclude: {{content}}',
      totalPattern: '(Total: {{count}})',
      rules: {
        general: 'General',
        dateRange: 'Date Range',
        valueRange: 'Value Range',
        wildcard: 'Match Rules',
        relativeDate: 'Relative Date',
      },
      types: {
        contain: 'Contains',
        startWith: 'Start With',
        endWith: 'End With',
        exact: 'Exactly Match',
        matchWord: 'Exactly Match',
        range: 'Range',
        greaterThan: 'Greater Than',
        lessThan: 'Less Than',
      },
    },
    pivotSetting: {
      title: 'Data Binding',
      moreChartType: 'show more chart types...',
    },
    conditionalFormat_chart: {
      title: 'Conditional Format',
      add: 'Add Conditional Format',
      hint: 'There is no conditional format setting added for this chart. Please click the button above to add a new one.',
      targetValue: 'Target Value',
      condition: 'Condition',
      style: 'Style',
    },
    customColorSetting: {
      add: 'Create New Palette',
      hint: 'There is no custom palette.\n Please click the below button to create new palette.',
    },
    conditionalFormat_pivotTable: {
      title: 'Conditional Format',
      add: 'Add Conditional Format',
      hint: 'There is no conditional format setting added for this component. Please click the button above to add a new one.',
      bindData: 'No data bound to the component.',
      targetValue: 'Target Value',
      appliedOnEntireRow: 'Apply on Entire Row',
      applied2Row: 'True',
      applied2Col: 'False',
      pickUpCFStyle: 'Pick up a style',
      rowNumber: 'Row Number',
    },
    conditionalFiltering: {
      title: 'Conditional Visualization Settings',
      add: 'Add',
      hint: 'There is no conditional visualization setting added for this scenario. Please click the button above to add a new one.',
      tab_rank: 'Rank',
      tab_filter: 'Conditional Filter',
      rankBy: 'Rank By',
      rankFor: 'Rank For',
      rankLevel: 'Rank Level',
      rankOrder: 'Rank Order',
      rankOrder_asc: 'Bottom',
      rankOrder_desc: 'Top',
      type: 'Type',
      type_rank: 'Rank',
      type_percentage: 'Percentage',
      keep: 'Keep',
      rankOrder_top: 'Top',
      rankOrder_middle: 'Middle',
      rankOrder_bottom: 'Bottom',
      competitionRule: 'Equal As',
      filterBy: 'Filter By',
      filterCondition: 'Condition',
      filterFor: 'Filter For',
      partitioning: 'Partitioning',
      addressing: 'Addressing',
      duplicate: {
        unique: 'Unique',
        competition: 'Competition',
        modifiedCompetition: 'ModifiedCompetition',
        dense: 'Dense',
      },
    },
    sort: {
      title: 'Sort',
      add: 'Add Sort',
      hint: 'There is no sort added for this scenario. Please click the button above to add a sort.',
      sortTarget: 'Target Field',
      sortBy: 'Sort By',
      auto: 'Auto',
      manual: 'Manual',
      alphabetical: 'Alphabetical',
      numerical: 'Numerical',
      chronological: 'Chronological',
      sortOrder: 'Sort Order',
      sortOrder_asc: 'Asc.',
      sortOrder_desc: 'Desc.',
      manualSort_moveUp: 'Move Up',
      manualSort_moveDown: 'Move Down',
      manualSort_moveToTop: 'Move To Top',
      manualSort_moveToBottom: 'Move To Bottom',
    },
    referenceLine: {
      title: 'Reference Line',
      add: 'Add Reference Line',
      hint: 'There is no reference line added for this scenario. Please click the button above to add.',
      subTitlePattern: 'Value = {{content}}',
      name: 'Name',
      type: 'Type',
      value: 'Value',
      axis: 'Axis',
      lineStyle: 'Line Style',
      lineColor: 'Line Color',
      lineWidth: 'Line Width',
      aggregationTypes: {
        constant: 'Constant Line',
        max: 'Max Line',
        min: 'Min Line',
        median: 'Median Line',
        average: 'Average Line',
        count: 'Count Line',
      },
      detailLevel: 'Scope',
      detailLevelTypes: {
        group: 'Group',
        total: 'Total',
        trellis: 'Trellis Cell',
      },
      auto: 'Auto',
    },
    trendLine: {
      title: 'Trend Line',
      type: 'Type',
      polynomialDegree: 'Degree',
      lineStyle: 'Line Style',
      lineColor: 'Line Color',
      lineWidth: 'Line Width',
      detailLevel: 'Scope',
      detailLevelTypes: {
        group: 'Group',
        total: 'Total',
        trellis: 'Trellis Cell',
      },
      trendLineTypes: {
        None: 'None',
        Linear: 'Linear',
        Polynomial: 'Polynomial',
        Power: 'Power',
        Logarithmic: 'Logarithmic',
        Exponential: 'Exponential',
        Fourier: 'Fourier',
      },
      auto: 'Auto',
    },
    jumpToDocuments: {
      title: 'Jump To',
      add: 'Add Setting',
      hint: 'There is no jump to setting for this scenario. Please click the button above to add.',
      name: 'Name',
      openModeLabel: 'Open Mode',
      openMode: {
        newWindow: 'New Window',
        dialog: 'Dialog',
        embedded: 'Embedded',
        redirect: 'Redirect',
        none: 'None',
      },
      redirectAreaLabel: 'Redirect Area',
      redirectArea: {
        hostPage: 'Host Page',
        dashboard: 'Dashboard',
      },
      typeLabel: 'Type',
      type: {
        report: 'Report',
        dashboard: 'Dashboard',
        outerURL: 'External URL',
        innerURL: 'Internal URL',
      },
      docLabel: 'Document',
      docList: {
        loading: 'Loading doc list from server...',
        loadFailed: 'Failed to load doc list from server!',
      },
      loadDocParameters: {
        loading: 'Loading parameters of this document from server...',
        loadFailed: 'Failed to load parameters of this document from server!',
      },
      parametersLabel: 'Parameters',
      parameterHeader: {
        name: 'Name',
        prompt: 'Prompt',
        dataType: 'Type',
        valueType: 'Value Type',
        value: 'Value',
      },
      parameterValueType: {
        notSet: 'Not Set',
        constant: 'Constant',
        selection: 'Selected Value',
        filteredValue: 'Filtered Value',
        slicer: 'Slicer',
        parameter: 'Parameter',
      },
      parameterDataType: {
        boolean: 'Boolean',
        integer: 'Integer',
        float: 'Float',
        string: 'String',
        dateTime: 'DateTime',
        date: 'Date',
        multiDimension: 'Multi Dimension',
      },
      parameterValue: {
        selection: {
          placeholder: 'Choose Fields\u2026',
          title: 'Selected Value Setting',
          chooseFields: 'Choose Fields',
        },
        filteredValue: {
          placeholder: 'Choose Field\u2026',
          title: 'Filtered Value Setting',
          chooseField: 'Choose Field',
          chooseValueProperty: 'Choose Value',
        },
        slicer: {
          placeholder: 'Choose Slicer\u2026',
          title: 'Slicer Value Setting',
          chooseSlicer: 'Choose Slicer',
          slicerDropDownPlaceholder: 'No Slicer selected',
          chooseColumns: 'Choose Columns',
          chooseValueProperty: 'Choose Value',
        },
        parameter: {
          placeholder: 'Choose Parameter',
        },
      },
      jumpToListValuePropertyType: {
        all: 'All',
        minValue: 'Min Value',
        maxValue: 'Max Value',
      },
      jumpToRangeValuePropertyType: {
        range: 'Range',
        minValue: 'Min Value',
        maxValue: 'Max Value',
      },
      url: 'Url',
      targetPage: 'Target Page',
      backFrom: 'Back from',
      jumpToOptions: 'Options',
      showToolbar: 'Show Toolbar',
      pageSizeMode: 'Page Size Mode',
      reportPageDisplay: 'Page Display Mode',
      dashboardPageNumber: 'Initial Page Number',
      reportDisplay: {
        single: 'Single Page View',
        pageless: 'Galley Mode',
        continuous: 'Continuous',
      },
      dialogWidth: 'Width',
      dialogHeight: 'Height',
      enableDialogFixedSize: 'Dialog Size',
      dialogSizeAuto: 'Auto',
      dialogSizeFixed: 'Fixed',
    },
    parameters: {
      title: 'Parameter Setting',
      name: 'Name',
      prompt: 'Prompt',
      dataType: 'Data Type',
      hidden: 'Hidden',
      multiValue: 'MultiValue',
      multiline: 'Multiline',
      validValues: {
        label: 'Available Values',
        addLabel: 'Add Parameter Value',
        placeHolderValue: 'Value',
        placeHolderLabel: 'Label',
      },
      defaultValue: {
        label: 'Default Value',
        addLabel: 'Add Value',
        placeholder: '<Empty>',
      },
      valueSource: 'Value Source',
      valueSourceEnum: {
        datasetReference: 'From query',
        custom: 'Non-queried',
      },
      datasetReferenceField: 'Value Field',
    },
    hierarchy: {
      title_create: 'Create Hierarchy Field',
      title_edit: 'Edit Hierarchy Field',
      name: 'Hierarchy Name',
      hint: 'Hint: Drag or double-click fields to add to the hierarchy.',
      namePattern: 'Hierarchy_{{name}}',
      conflictPattern: 'There\'s already a field named \'{{name}}\'',
    },
    calculation: {
      calculationType: 'Calculation Type',
      along: 'Along',
      empty: '<Empty>',
      valuesBefore: 'Values Before',
      valuesAfter: 'Values After',
      includeCurrent: 'Include Current Value',
      advancedSetting: 'Advanced Setting',
    },
    dateCalcualtion: {
      dateTarget: 'Date Target',
      dateType: 'Period Unit',
      dateOffset: 'Period Offset',
      dateRange: 'Date Range',
      overRange: 'Over Range',
      moreSettings: 'More Settings',
    },
    group: {
      accounting: 'Percentile',
      ranking: 'Ranking',
    },
    imageManager: {
      title: 'Image Manager',
      add: 'Add Image',
      loadingImage: 'Loading shared image from server...',
      loadImageFailed: 'Failed to load shared image from server!',
      noSharedImage: 'No shared image found.',
      source: {
        embedded: 'Embedded',
        shared: 'Shared',
        external: 'External URL',
      },
      external: {
        placeholder: 'Enter Image URL or Data URI',
        label: 'Image URL',
        invalidURL: 'Invalid Image URL',
      },
      largeImageWarning: 'Dashboard may not be saved with large embedded images. Please consider using shared images, or smaller embedded images(<1MB) instead.',
      searchPlaceholder: 'Search...',
    },
    changeMap: {
      title: 'Switch Map',
      hint: 'Please add corresponding filters for your specific map level.',
    },
    hidePage: {
      title: 'Cannot Hide Page',
      content: 'A dashboard must contain at least one visible page!',
    },
    rename: {
      title: 'Rename',
      titlePattern: 'Rename - {{name}}',
      hint: 'New Name',
      conflict: 'Item named \'{{name}}\' already exists.',
      originalName: 'Original Name',
      canNotAllSpaces: 'Can\'t be a string all of spaces',
    },
    webContent: {
      title: 'Web Content',
      types: {
        serverContent: 'Server Content',
        src: 'Url',
        srcDoc: 'Html',
      },
      emptyServerContent: 'Empty',
      webContentStoreLink: 'Get More Plugins',
    },
    versionInfo: {
      title: 'About Wyn Dashboards',
      name: 'Wyn Dashboards',
      version: 'Version:',
      copyright: 'Copyright \u00A9 2020 GrapeCity',
    },
    bullet: {
      title: 'Bullet Graph Setting',
      barSize: 'Height',
      maxi: 'Maximum',
      good: 'Good',
      bad: 'Bad',
      forecast: 'Forecast',
      tickunit: 'Tick Unit',
      maxiColor: 'Maximum Color',
      goodColor: 'Good Color',
      badColor: 'Bad Color',
      measureColor: 'Actual Color',
      targetColor: 'Target Color',
      forecastColor: 'Forecast Color',
    },
    pareto: {
      title: 'Pareto Graph Setting',
      barSize: 'Height',
      target: 'Target',
      targetColor: 'Target Color',
    },
    hBar: {
      title: 'HBar Graph Setting',
      barSize: 'Height',
    },
    runningCalculation: {
      title: 'Running Calculation',
    },
    movingCalculation: {
      title: 'Moving Calculation',
    },
    dataFormat: {
      title: 'Data Format',
    },
    interactionSetting: {
      title: 'Interaction Setting',
      auto: 'Auto',
      sourceFields: 'Source Fields',
      targetFields: 'Target Fields',
      target: 'Target',
      add: 'Add a Mapping Item',
      mergedFields: 'Merged Fields',
    },
    annotation: {
      title: 'Annotation',
      placeholder: 'The annotation is now empty.',
    },
    shareScenario: {
      title: 'Share Scenario',
      visibleMenuOptions: 'Visible Menu Items',
      embedWith: 'Embed With',
      size: 'Size',
      iframe: 'IFrame',
      div: 'Div',
      copyUrl: 'Copy URL',
      copyOptions: 'Copy Options',
      openFullDashboardMode: 'Back to Dashboard',
      unsavedTip: '* Dashboard Unsaved *',
    },
    filterState: {
      saveTitle: 'Save Filter View',
      manageTitle: 'Manage Filter Views',
      name: 'Name',
      placeholderName: 'Enter filter view name here',
      emptyWarning: 'A filter view name must be provided',
      existWarning: 'A filter view name {{name}} already exists',
      defaultFilterView: 'Filter View: <Default>',
      filterView: 'Filter View: {{ name }}',
      reset: 'Reset to default view',
      save: 'Save current view...',
      manage: 'Manage views...',
      noFilterView: 'No filter view saved',
    },
    changeFloorPlan: {
      title: 'Switch Floor Plan',
    },
    mergeDatasets: {
      title: 'Manage Model',
      addLink: 'Add Link',
      removeLink: 'Remove Link',
      datasets: 'Datasets',
      links: 'Links',
      loading: 'Loading...',
    },
    dataColorRelationshipManager: {
      title: 'Assign Colors',
      dataItems: 'Data Items',
      applyPalette: 'Apply Palette',
      noDataPlaceHolder: 'No Data Items Can Assign Color',
    },
    analysisPath: {
      title: 'Analysis Path History',
      drill: 'Drill from {{from}} to {{to}}',
      changeDataBinding: 'Data binding change.',
      changeChartType: 'Change Chart Type',
      emptyAnalysis: 'No analysis path is added.',
      root: 'Initial State',
    },
    // add action dialog here
  },
  actionBar: {
    filter: 'Filter',
    sort: 'Sort',
    swapRowsAndCols: 'Swap Rows And Columns',
    rank: 'Conditional Visualization',
    changeChartType: 'Chart Type',
    changePivotSetting: 'Data Binding',
    conditionalFormat: 'Conditional Format',
    referenceLine: 'Reference Line',
    showData: 'Show Data',
    hideData: 'Hide Data',
    clearCustomData: 'Clear Custom Data',
    expand: 'Expand',
    shrink: 'Shrink',
    focus: 'Focus',
    exitFocus: 'Back To Designer',
    selectMap: 'Select Map',
    edit: 'Edit',
    remove: 'Remove',
    moreActions: 'More Actions',
    enableCrossFilter: 'Enable Cross Filter',
    disableCrossFilter: 'Disable Cross Filter',
    trendLine: 'Trend Line',
    export: 'Export',
    addAnnotation: 'Add Annotations',
    editAnnotation: 'Edit Annotations',
    annotation: 'Annotations',
    selectFloorPlan: 'Select Floor Plan',
    clearRuntimeFilters: 'Clear Runtime Filters',
    refreshDefinition: 'Refresh',
    shareScenario: 'Share Scenario',
    openFullDashboard: 'Open Full Dashboard',
    clearSelection: 'Clear Selection',
    analysisPath: 'Analysis Path',
    mergeDatasets: 'Merge Datasets',
    // add action name here
  },
  charts: {
    tooltip: {
      keep: 'Keep',
      exclude: 'Exclude',
      drill: 'Drill Down',
      drillDown: 'Drill Down',
      drillDetail: 'Drill Detail',
      drillRoot: 'Home',
      drillClear: 'Clear Drill Items',
      jump: 'Jump',
      noDimensionToDrill: 'No dimension to drill to',
      expandHierarchy: 'Expand Groups',
      collapseHierarchy: 'Collapse Groups',
    },
    displayUnit: {
      none: 'None',
      e2: 'Hundreds',
      e3: 'K',
      e4: '10K',
      e5: '100K',
      e6: 'M',
      e7: '10M',
      e8: '100M',
      e9: 'B',
      e12: 'T',
      pattern: '({{unit}})',
    },
  },
  tables: {
    grandTotal: 'Grand Total',
    subTotal: 'Total',
  },
  richText: {
    hint: 'The rich text component is now empty. Please click the edit button on the top right corner to add content.',
    expression: {
      title: 'Aggregation',
      loading: '{loading...}',
      noData: '-',
      preparing: '{preparing...}',
      dataset: 'Dataset',
      chooseField: 'Choose Field',
      field: 'Field',
      noFilterHint: 'There is no filter added for this scenario. Please click the button above to add a filter.',
      displayUnit: 'Display Unit',
      format: 'Format',
    },
    expressionVariable: {
      title: 'Context Variable',
      prompt: 'Hint: Input single context variable, such as datasets["datasetName"].lastUpdated',
    },
    fontSize: {
      smaller: 'Smaller',
      small: 'Small',
      normal: 'Normal',
      large: 'Large',
      larger: 'Larger',
    },
    link: {
      title: 'Link Settings',
      url: 'Url',
      targetPage: 'Target Page',
      none: 'None',
    },
  },
  spreadChart: {
    saveDataRange: 'Save as Data Source',
    enterEditing: 'Configure Custom Dataset',
    exitEditing: 'Exit Configuration',
    bindingHint: 'Please click the "Configure" button to generate a dataset.',
    bindingHintInEditing: 'Please select wanted cells to generate a dataset.',
    addPivotTable: 'Add Pivot Table',
    removePivotTable: 'Remove Pivot Table',
    setDataSourceRange: 'Set Selection Range As Data Source',
    showDataSourceRange: 'Show Data Source Range',
    hideDataSourceRange: 'Hide Data Source Range',
    save: 'Save',
    values: 'Values',
    columnsPattern: 'Column{{index}}',
    rowsPattern: 'Row{{index}}',
    removeData: 'Remove Empty Cells',
    none: 'None',
    emptyRowColumn: 'Empty Rows/Columns',
    emptyDimension: 'Empty Dimensions',
    emptyCell: 'Empty Cells',
    columnAsField: 'Column As Field',
    layout: 'Layout',
    tables: 'Aggregation',
    source: 'Calculation',
    tablesAndSource: 'Aggregation & Calculation',
    tablesAndViewer: 'Calculation & Visualization',
    all: 'All',
    getPivotDataDescription: 'This function will return pivot data.',
  },
  mergedChart: {
    datasetJoinType: 'Dataset Join Type',
    innerJoin: 'Inner Join',
    fullJoin: 'Full Join',
  },
  webContent: {
    empty: 'Blank',
    emptyInRunTime: 'Blank',
  },
  slicers: {
    filterPlaceholder: 'Search',
    selectAll: '(All)',
    search: 'Search',
    clearSelection: 'Clear Selection',
    sort: 'Slicer Sort',
    notSelected: 'Not Set',
    startDate: 'Start Date',
    endDate: 'End Date',
    value: 'Value',
    showMore: 'Show more\u2026',
    selectParameter: 'Select parameter',
    dateRangeSlicer: {
      dateFormat: 'MM/DD/YYYY',
      yearFormat: 'YYYY',
      yearQuarterFormats: [
        '[Q]1 YYYY',
        '[Q]2 YYYY',
        '[Q]3 YYYY',
        '[Q]4 YYYY',
      ],
      quarterFormats: [
        'Q1',
        'Q2',
        'Q3',
        'Q4',
      ],
      monthFormat: 'MMM',
      yearMonthFormat: 'MMM YYYY',
      timeFormat: 'HH:mm:ss',
      date: 'Date',
      year: 'Year',
      yearQuarter: 'Year-Quarter',
      yearMonth: 'Year-Month',
      dateTime: 'Date Time',
      dateRange: 'Date Range',
      selectedRange: 'Selected Range: ',
      ok: 'OK',
      useDynamicRange: 'Use Dynamic Range',
      useStaticRange: 'Use Static Range',
      dynamicRange: {
        today: 'Today',
        yesterday: 'Yesterday',
        thisWeek: 'This Week',
        last7Days: 'Last 7 Days',
        thisMonth: 'This Month',
        last30Days: 'Last 30 Days',
        thisYear: 'This Year',
        last365Days: 'Last 365 Days',
      },
    },
    relativeDateSlicer: {
      PreviousYear: 'Previous Year',
      ThisYear: 'This Year',
      ThisQuarter: 'This Quarter',
      PreviousMonth: 'Previous Month',
      ThisMonth: 'This Month',
      Q1: 'Q1',
      Q2: 'Q2',
      Q3: 'Q3',
      Q4: 'Q4',
      none: 'None',
      custom: 'Custom',
      addRelativeDate: 'Add Relative Date',
      itemName: 'Name',
    },
  },
  editors: {
    colorDropDown: {
      theme: 'Theme Colors',
      themeColors: {
        base: '{{colorKey}}',
        darker25: '{{colorKey}} - 25% darker',
        darker50: '{{colorKey}}- 50% darker',
        lighter25: '{{colorKey}}- 25% lighter',
        lighter50: '{{colorKey}} - 50% lighter',
        lighter75: '{{colorKey}} - 75% lighter',
      },
    },
    relativeDateEditor: {
      anchor: 'Anchor',
      previousYear: 'Previous',
      previousDay: 'Previous',
      previousQuarterMonthWeek: 'Previous',
      thisYearDay: 'This',
      thisQuarterMonthWeek: 'This',
      nextYearDay: 'Next',
      nextQuarterMonthWeek: 'Next',
      lastN: 'Last',
      nextN: 'Next',
      year: 'Year',
      quarter: 'Quarter',
      month: 'Month',
      week: 'Week',
      day: 'Day',
      toNow: 'To Date',
      toAnchor: 'To Date',
      anchorRelativeTo: 'Anchor Relative To',
      space: ' ',
    },
    multipleValues: {
      label: '<...>',
      title: 'multiple values',
    },
    colorFriendlyDisplay: {
      Tint20Percent: '20% lighter',
      Tint40Percent: '40% lighter',
      Tint60Percent: '60% lighter',
      Shade75Percent: '75% darker',
      Shade50Percent: '50% darker',
    },
    colorOpacity: 'opacity',
    colorCustom: {
      customColors: 'Custom',
      webColors: 'Web',
      noFill: 'No Fill',
      noValue: 'No Value',
      inherit: 'Inherit',
      auto: 'Auto',
    },
    parameterWrapper: {
      useCustomValue: 'Use custom value',
      addParameter: 'Use a new parameter...',
    },
    timespan: {
      labels: {
        day: 'DAY',
        hour: 'HR',
        minute: 'MIN',
        second: 'SEC',
      },
    },
    withAggregatedValue: {
      useConstantValue: 'Use constant value',
      addAggregatedValue: 'Use a new aggregated value...',
      aggregatedSetting: 'Aggregation Setting',
    },
  },
  patterns: {
    measures: {
      pattern: '{{aggregation}} of {{measure}}',
      pattern_duplicated: '{{aggregation}} of {{measure}} ({{idx}})',
      nonePattern: '{{measure}}',
      nonePattern_duplicated: '{{measure}} ({{idx}})',
    },
    calculations: {
      running: 'Running',
      moving: 'Moving',
      pattern: '{{method}} {{calculation}} on {{aggregation}}',
      pattern_duplicated: '{{method}} {{calculation}} on {{aggregation}} ({{idx}})',
      accounting: 'Percentile',
      ranking: 'Ranking',
      value: 'Value',
      ratio: 'Ratio',
      difference: 'Difference',
      percentDifference: 'Percent Difference',
    },
    chartTitle: {
      default: 'Chart',
      separator: ', ',
      connector: ' and ',
      pattern: '{{measure}} by {{dimension}}',
    },
    datetime: {
      fiscalYearPattern: 'FY {{year}}',
      quarter1: 'Q1',
      quarter2: 'Q2',
      quarter3: 'Q3',
      quarter4: 'Q4',
      parts: {
        year: 'Year',
        quarter: 'Quarter',
        month: 'Month',
        week: 'Week',
        day: 'Day',
        hour: 'Hour',
        minute: 'Minute',
        second: 'Second',
        millisecond: 'Millisecond',
      },
    },
    pageName: {
      namePattern: 'Page {{number}}',
      namePattern_copy: '{{name}} - Copy {{number}}',
      nameRegex: '^Page (\\d+)$',
      nameRegex_copy: '^{{name}} - Copy (\\d+)$',
    },
    parameterName: {
      namePattern: 'Parameter{{number}}',
      nameRegex: '^Parameter(\\d+)$',
    },
    container: {
      defaultTitle: 'Container',
      tabTitleButton: 'Tab {{number}}',
      tabTitleRegex: '^Tab (\\d+)$',
    },
    tooltip: {
      selectedValue: '{{count}} value selected',
      selectedValue_plural: '{{count}} values selected',
    },
    conditions: {
      between: ' Between {{min}} and {{max}}',
      notBetween: ' Not between {{min}} and {{max}}',
    },
  },
  notifications: {
    dashboardSaving: 'Saving Dashboard',
    dashboardSaved: 'Dashboard Saved.',
    dismiss: 'Dismiss',
    dismissAll: 'Dismiss All',
    showAll: 'Show All',
    showDetails: 'Show Details',
    infoCategory: 'Info',
    warningCategory: 'Warning',
    errorCategory: 'Error',
    expandTitle: 'Expand',
    collapseTitle: 'Collapse',
    promptUsingMobileView: {
      title: 'Mobile View Is In-use',
      content: "Note: You are seeing the 'Mobile View' of the dashboard. Switch to the 'Desktop View' to see the full dashboard.",
    },
  },
  error: {
    noImage: 'No Image',
    noImageInRunTime: 'No Image',
    noData: 'No data found',
    getDatasetFailed: 'Failed to retrieve data!',
    getDatasetNoAccess: 'No required permission to retrieve the data!',
    loadGeoDataFailed: 'Failed to load geo data!',
    loadFloorPlanDataFailed: 'Failed to load floor plan data!',
    exportFailed: 'Failed to export.',
    getTokenFailed: 'Failed to get token.',
    notSupportChangeChartType: 'The visualization component does not support changing the chart type!',
    loadVisualFailed: 'Failed to load visualization',
    docWithoutAccess: {
      title: 'Some used documents without access or not found.',
      content: {
        enVersion: '{{dashboardCount}} dashboard, {{reportCount}} report, {{datasetCount}} dataset, {{imageCount}} image, {{geoJsonCount}} geoJson, {{mapHierarchyCount}} mapHierarchy, {{visualCount}} visualization, {{floorPlanCount}} floorPlan and {{docThemeCount}} theme without access.',
        cnVersion: '{{dashboardCount}} dashboard, {{reportCount}} report, {{datasetCount}} dataset, {{imageCount}} image, {{geoJsonCount}} geoJson, {{visualCount}} visualization, {{floorPlanCount}} floorPlan and {{docThemeCount}} theme without access.',
      },
    },
    statusCode: {
      401: {
        title: 'Unauthorized',
        content: 'Your login info is either incorrect or expired. Try reload the page or login again.',
      },
      403: {
        title: 'Forbidden',
        content: 'You do not have the required permission to access the resource.',
      },
      404: {
        title: 'Not Found',
        content: '{{content}} was not found.',
      },
      500: {
        title: 'Internal Server Error',
        content: '',
      },
    },
    errorCode: {
      200000: {
        title: 'Unknown Error',
        content: '{{context}}',
      },
      // 200001: model invalid. User does not need to see this.
      200002: {
        title: 'Document Not Found',
        contentHasName: 'Cannot find the {{type}} document \'{{name}}\'.',
        contentNoName: 'Cannot find referenced {{type}} document.',
      },
      200101: {
        title: '{{title}} - Dashboard Exists',
        content: 'There is already a dashboard with the same name.',
      },
      200102: {
        title: 'Document Count Exceeded',
        content: 'The count of dashboards reached your license limit.',
      },
      200201: {
        title: 'Document Access Denied',
        content: 'You do not have the required permission to access the {{type}} document \'{{name}}\'.',
      },
      200204: {
        title: 'Aggregated Data Points Exceeded',
        content: 'The count of aggregated data points exceeds the limit setting.',
      },
      200211: {
        title: 'Get Dataset Data Failed',
        content: 'Current user must belong to a dedicated organization to access dataset cache of a multi-tenant dataset',
      },
      200212: {
        title: 'Dataset Cache Unavailable',
        content: 'Please refresh dataset cache \'{{datasetName}}\'.',
      },
      200213: {
        title: 'Dataset Cache Unavailable',
        content: 'Please refresh dataset cache \'{{datasetName}}\'.',
      },
      200214: {
        title: 'Exceeded Max Aggregated Data Points',
        content: 'The count of aggregated data points exceeds the limit {{maxAggDataPoints}}.',
      },
      200215: {
        title: 'Insufficient Context Value',
        content: 'Specified property, \'{{property}}\', not found on current user-context.',
      },
      200216: {
        title: 'Insufficient Context Value',
        content: 'Specified property, \'{{property}}\', not found on current organization-context.',
      },
      200217: {
        title: 'Insufficient Context Value',
        content: 'The literal value of context parameter, \'{{parameter}}\', can not be converted to \'{{dataType}}\' type.',
      },
      200218: {
        title: 'Insufficient Context Value',
        content: 'Value of context parameter, \'{{parameter}}\', is null or empty.',
      },
    },
    devTools: {
      loadDefinitionError: 'Failed to load visualization',
    },
    multiSourceChart: {
      measureInGroup: {
        title: 'Operation Forbidden',
        content: 'Do not add measure field to grouping role!',
      },
    },
  },
  invalidInfos: {
    inputEmpty: 'Input cannot be empty',
    invalidFloat: 'A valid number is required',
    invalidInteger: 'A valid integer is required',
    lessThanMin: 'Must be greater than or equal to the minimum value {{ min }}',
    lessThanOrEqualToMin: 'Must be greater than the minimum value {{ min }}',
    greaterThanMax: 'Must be less than or equal to the maximum value {{ max }}',
    greaterThanOrEqualToMax: 'Must be less than the maximum value {{ max }}',
    greaterThanMaxLength: 'Must be less than or equal to the maximum length {{ maxLength }}',
    notMatchPattern: 'Must match the regex {{ pattern }}',
    date: {
      invalidDate: 'A valid date is required',
      lessThanMinDate: 'Must be after or same as the minimum date {{ minDate }}',
      greaterThanMaxDate: 'Must be before or same as the maximum date {{ maxDate }}',
    },
    parameter: {
      nameEmpty: 'Name cannot be empty',
      nameExist: 'Name already exists',
      nameInvalid: 'Illegal Name',
      promptEmpty: 'Prompt cannot be empty',
    },
    save: {
      empty: 'Document name cannot be empty',
      invalid: 'Illegal Name',
    },
    dynamicUrl: {
      urlEmpty: 'Url cannot be empty',
      illegalHttpFormat: 'Illegal Url',
      isEmpty: 'Cannot be empty',
      unSupportedVariableName: 'Unsupported variable name',
      illegalVariableExpression: 'Illegal variable expression',
    },
  },
  contextMenu: {
    selection: 'Selection',
    overlapping: 'Overlapping',
    sendToFront: 'Send to Front',
    bringForward: 'Bring Forward',
    forward: 'Bring Forward',
    backward: 'Send Backward',
    sendToBack: 'Send to Back',
    sendBackward: 'Send Backward',
    alignment: 'Alignment',
    horizontalAlign: 'Horizontal Align',
    verticalAlign: 'Vertical Align',
    alignLeft: 'Align Left',
    alignCenter: 'Align Center',
    alignRight: 'Align Right',
    alignTop: 'Align Top',
    alignMiddle: 'Align Middle',
    alignBottom: 'Align Bottom',
    assimilation: 'Assimilation',
    sameWidth: 'Same Width',
    sameHeight: 'Same Height',
    sameSize: 'Same Size',
  },
  geoMap: {
    loadingGeoJSON: 'Loading GEOJson From Server!',
    online: 'Online',
    offline: 'Built-in',
    directGeo: 'Custom',
  },
  drillDownPanel: {
    header: 'Drill Down',
    typeLabel: 'Mode',
    drillDownType: {
      all: 'Default',
      list: 'Pre-set Targets',
      path: 'Pre-set Path',
    },
    itemsTitle: {
      list: 'Drill Down Targets',
      path: 'Drill Down Path',
    },
  },
};

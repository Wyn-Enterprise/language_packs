$defaults:
  bandedList:
    props:
      PreventOrphanedFooter: false
      PreventOrphanedHeader: false
    sizes:
      cm:
        width: 5cm
      in:
        width: 2in
  bandedListDetails:
    sizes:
      cm:
        height: 1.5cm
      in:
        height: 0.5in
  bandedListFooter:
    sizes:
      cm:
        height: 0.75cm
      in:
        height: 0.25in
  bandedListGroup:
    props:
      PreventOrphanedFooter: false
      PreventOrphanedHeader: false
  bandedListHeader:
    props:
      RepeatOnNewPage: true
    sizes:
      cm:
        height: 0.75cm
      in:
        height: 0.25in
  barcode:
    place:
      cm:
        Height: 4cm
        Width: 4cm
      in:
        Height: 1.5in
        Width: 1.5in
    props:
      Symbology: QRCode
    sizes:
      cm:
        quietZone: 0cm
        supplementOptionsSpacing: 0cm
      in:
        quietZone: 0in
        supplementOptionsSpacing: 0in
    style:
      Color: Black
      FontFamily: Courier New
      FontSize: 8pt
  body:
    style:
      BackgroundColor: Transparent
  bullet:
    place:
      cm:
        Height: 1.5cm
        Width: 5cm
      in:
        Height: 0.5in
        Width: 2in
    props:
      LabelFontColor: Black
      LabelFontFamily: Arial
      LabelFontSize: 10pt
  checkbox:
    place:
      cm:
        Height: 0.75cm
        Width: 2.5cm
      in:
        Height: 0.25in
        Width: 1in
    style:
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
      PaddingBottom: 2pt
      PaddingLeft: 2pt
      PaddingRight: 2pt
      PaddingTop: 2pt
  container:
    place:
      cm:
        Height: 5cm
        Width: 7.5cm
      in:
        Height: 2in
        Width: 3in
    props:
      ConsumeWhiteSpace: false
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
  dvchart:
    custom:
      barBottomWidth: 0.55
      barTopWidth: 0.55
      barWidth: 0.55
    place:
      cm:
        Height: 7.5cm
        Width: 10cm
      in:
        Height: 3in
        Width: 4in
    props:
      Palette: Office
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
      PaddingBottom: 2pt
      PaddingLeft: 2pt
      PaddingRight: 2pt
      PaddingTop: 2pt
  dvchartAxisX:
    props:
      LabelStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        PaddingBottom: 2pt
        PaddingLeft: 2pt
        PaddingRight: 2pt
        PaddingTop: 2pt
      LineStyle:
        Border:
          Color: Black
          Style: Solid
          Width: 1pt
      MajorGrid: false
      MajorGridStyle:
        Border:
          Color: Gray
          Style: Solid
          Width: 1pt
      TitleStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        PaddingBottom: 2pt
        PaddingLeft: 2pt
        PaddingRight: 2pt
        PaddingTop: 2pt
  dvchartAxisY:
    props:
      LabelStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        PaddingBottom: 2pt
        PaddingLeft: 2pt
        PaddingRight: 2pt
        PaddingTop: 2pt
      LineStyle:
        Border:
          Color: Black
          Style: Solid
          Width: 1pt
      MajorGrid: true
      MajorGridStyle:
        Border:
          Color: Gray
          Style: Solid
          Width: 1pt
      TitleStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        PaddingBottom: 2pt
        PaddingLeft: 2pt
        PaddingRight: 2pt
        PaddingTop: 2pt
  dvchartFooter:
    props:
      TextStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
    style:
      BackgroundColor: Transparent
      PaddingBottom: 4pt
      PaddingLeft: 0pt
      PaddingRight: 0pt
      PaddingTop: 2pt
  dvchartGlobalLegend:
    props:
      Orientation: Vertical
      TextStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
      TitleStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
    style:
      BackgroundColor: Transparent
      PaddingBottom: 2pt
      PaddingLeft: 0pt
      PaddingRight: 10pt
      PaddingTop: 4pt
  dvchartHeader:
    props:
      TextStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        FontWeight: Bold
      Title: Chart Title
    style:
      BackgroundColor: Transparent
      PaddingBottom: 2pt
      PaddingLeft: 0pt
      PaddingRight: 0pt
      PaddingTop: 4pt
  dvchartLegend:
    props:
      Orientation: Vertical
      TextStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
      TitleStyle:
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
    style:
      BackgroundColor: Transparent
      PaddingBottom: 2pt
      PaddingLeft: 0pt
      PaddingRight: 10pt
      PaddingTop: 4pt
  dvchartPlot:
    custom:
      configInnerRadius: 0.5
      configStartAngle: 0
    props:
      Config:
        Text:
          Style:
            Color: Black
            FontFamily: Arial
            FontSize: 10pt
  dvchartPlotArea:
    style:
      BackgroundColor: Transparent
      PaddingBottom: 0pt
      PaddingLeft: 0pt
      PaddingRight: 0pt
      PaddingTop: 0pt
  formattedText:
    place:
      cm:
        Height: 1.5cm
        Width: 5cm
      in:
        Height: 0.5in
        Width: 2in
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
  gridColumn:
    props:
      cm:
        Width: 2.5cm
      in:
        Width: 1in
  gridRow:
    props:
      cm:
        Height: 0.75cm
      in:
        Height: 0.25in
  image:
    place:
      cm:
        Height: 2.5cm
        Width: 2.5cm
      in:
        Height: 1in
        Width: 1in
    style:
      Border:
        Style: None
  inputField:
    place:
      cm:
        Height: 0.75cm
        Width: 2.5cm
      in:
        Height: 0.25in
        Width: 1in
    style:
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
      PaddingBottom: 2pt
      PaddingLeft: 2pt
      PaddingRight: 2pt
      PaddingTop: 2pt
  line:
    place:
      cm:
        Height: 0cm
        Width: 2.5cm
      in:
        Height: 0in
        Width: 1in
    props:
      LineColor: Black
      LineStyle: Solid
      LineWidth: 1pt
  list:
    place:
      cm:
        Height: 2.5cm
        Width: 2.5cm
      in:
        Height: 1in
        Width: 1in
    props:
      ConsumeWhiteSpace: false
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
  overflowPlaceholder:
    place:
      cm:
        Height: 2.5cm
        Width: 2.5cm
      in:
        Height: 1in
        Width: 1in
  pageFooter:
    place:
      cm:
        Height: 0.75cm
      in:
        Height: 0.25in
    style:
      BackgroundColor: Transparent
  pageHeader:
    place:
      cm:
        Height: 0.75cm
      in:
        Height: 0.25in
    style:
      BackgroundColor: Transparent
  report:
    props:
      ConsumeContainerWhitespace: false
    sizes:
      cm:
        BottomMargin: 2.5cm
        ColumnSpacing: 0cm
        LeftMargin: 2.5cm
        PageHeight: 29.7cm
        PageWidth: 21cm
        RightMargin: 2.5cm
        TopMargin: 2.5cm
      in:
        BottomMargin: 1in
        ColumnSpacing: 0in
        LeftMargin: 1in
        PageHeight: 11in
        PageWidth: 8.5in
        RightMargin: 1in
        TopMargin: 1in
  shape:
    place:
      cm:
        Height: 2.5cm
        Width: 5cm
      in:
        Height: 1in
        Width: 2in
    style:
      BackgroundColor: Transparent
      Border:
        Style: Solid
  sparkline:
    place:
      cm:
        Height: 0.75cm
        Width: 5cm
      in:
        Height: 0.25in
        Width: 2in
  subreport:
    place:
      cm:
        Height: 5cm
        Width: 5cm
      in:
        Height: 2in
        Width: 2in
    style:
      Border:
        Style: None
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
  table:
    custom:
      cellStyle:
        BackgroundColor: Transparent
        Border:
          Color: Black
          Style: None
          Width: 1pt
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        FontStyle: Normal
        FontWeight: Normal
    sizes:
      cm:
        columnWidth: 2.5cm
        rowHeight: 0.75cm
      in:
        columnWidth: 1in
        rowHeight: 0.25in
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
  tableOfContents:
    place:
      cm:
        Height: 2.5cm
        Width: 5cm
      in:
        Height: 1in
        Width: 2in
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
  tableOfContentsLevel:
    style:
      BackgroundColor: Transparent
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
  tablix:
    custom:
      cellStyle:
        BackgroundColor: Transparent
        Border:
          Color: Black
          Style: None
          Width: 1pt
        Color: Black
        FontFamily: Arial
        FontSize: 10pt
        FontStyle: Normal
        FontWeight: Normal
    sizes:
      cm:
        columnWidth: 2.5cm
        rowHeight: 0.75cm
      in:
        columnWidth: 1in
        rowHeight: 0.25in
    style:
      BackgroundColor: Transparent
      Border:
        Style: None
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
  textbox:
    place:
      cm:
        Height: 0.75cm
        Width: 2.5cm
      in:
        Height: 0.25in
        Width: 1in
    props:
      CanGrow: true
      KeepTogether: true
    style:
      Color: Black
      FontFamily: Arial
      FontSize: 10pt
      PaddingBottom: 2pt
      PaddingLeft: 2pt
      PaddingRight: 2pt
      PaddingTop: 2pt
$toolBoxContent:
  cpl: TextBox, CheckBox, Container, Line, Shape, TableOfContents, Image, List, Table, Tablix, Chart, Bullet, Barcode, FormattedText, Sparkline, Subreport, BandedList, InputField
  fpl: TextBox, CheckBox, Container, Line, Shape, TableOfContents, Image, List, Table, Tablix, Chart, Bullet, Barcode, FormattedText, Sparkline, Subreport, OverflowPlaceholder, BandedList, InputField
adorners:
  bandedList:
    detailsLabel: "<Details>"
    groupsLabel: Groups
  bullet:
    targetValue: Target value
    value: Value
  chart:
    categoryEncoding:
      fieldStub: "Category {index}"
    categoryFields: Category Fields
    colorEncoding:
      fieldStub: "Color {index}"
      title: Color
    dataFields: Data Fields
    detailEncoding:
      fieldStub: "Details {index}"
      title: Details
    encodingFields: Encodings
    itemsCountLabel: '[{itemsCount}]'
    multiValueField: "{firstFieldValue}, ..."
    seriesFields: Series Fields
    shapeEncoding:
      fieldStub: "Shape {index}"
      title: Shape
    sizeEncoding:
      fieldStub: "Size {index}"
      title: Size
    staticGrouping: Static Grouping
    valueEncoding:
      fieldStub: "Value {index}"
  fixedPage:
    addPage: Add Page
    page: Page
  formattedText:
    previewError: XHTML parsing error occurred. Please verify Html property value and Merge Fields values.
  sparkline:
    groupingExpressions: Grouping Expressions
    seriesValue: Series Value
  table:
    detailsGroupLabel: "<Details Group>"
    groupsLabel: Groups
    newGroupLabel: "<New Group>"
  tableOfContents:
    addItem: Add item
captions:
  barcodeInvalidText: '[{symbology}] ''{itemName}'' value or settings are invalid.'
  barcodeUnsupportedSymbology: '[{symbology}] ''{itemName}'' preview is limited in design-time.'
  basicSupportReportItemInfo: "{itemLabel} '{itemName}' has limited support in design-time."
  dvchartAxis:
    category: Category
    value: Value
  dvchartColor: 'Color [{index}]'
  dvchartDetails: 'Details [{index}]'
  dvchartShape: 'Shape [{index}]'
  overflowPlaceholder: "{overflowedItemName} Overflow Placeholder"
common:
  add: Add
  cancel: Cancel
  ok: OK
  open: Open...
contextActions:
  bandedList:
    addFooter: Add Footer
    addGroupFooter: Add Group Footer
    addGroupHeader: Add Group Header
    addHeader: Add Header
    delete: Delete
    deleteGroup: Delete Group
    groupTitle: Group
    insertGroup: Insert Group
    removeFooter: Remove Footer
    removeGroupFooter: Remove Group Footer
    removeGroupHeader: Remove Group Header
    removeHeader: Remove Header
    title: Banded List
  container:
    delete: Delete
    expression: Expression
    gridMode:
      cellsTitle: Cells
      columnTitle: Column
      delete: Delete
      insertColumn:
        left: Left
        right: Right
      insertColumnTitle: Insert Column
      insertRow:
        above: Above
        below: Below
      insertRowTitle: Insert Row
      mergeCells: Merge Cells
      rowActions: Row
      splitCells: Split Cells
      title: Grid
  dvchart:
    addAxis: Add Y-Axis
    addCategoryField: Add Category Field
    addDataField: Add Data Field
    addSeriesField: Add Series Field
    insertAfter: Insert Field After
    insertBefore: Insert Field Before
    moveBackward: Move Backward
    moveForward: Move Forward
    palette: Set Chart Palette
    presets:
      area: Area
      areaPercentStacked: Area Percent Stacked
      areaStacked: Area Stacked
      bar: Bar
      barPercentStacked: Bar Percent Stacked
      barStacked: Bar Stacked
      bubble: Bubble
      candlestick: Candlestick
      column: Column
      columnPercentStacked: Column Percent Stacked
      columnStacked: Column Stacked
      doughnut: Doughnut
      funnel: Funnel
      gantt: Gantt
      groups:
        area: Area
        bar: Bar
        column: Column
        line: Line
        misc: Miscellaneous
        pie: Pie
        polarBar: Polar
        polarColumn: Spiral
      highLowClose: High Low Close
      highLowOpenClose: High Low Open Close
      line: Line
      lineSmooth: Line Smooth
      pie: Pie
      polarBar: Polar
      polarBarPercentStacked: Polar Percent Stacked
      polarBarStacked: Polar Stacked
      polarColumn: Spiral
      polarColumnPercentStacked: Spiral Percent Stacked
      polarColumnStacked: Spiral Stacked
      pyramid: Pyramid
      scatter: Scatter
      title: Set Plot Template
  report:
    addFooter: Add Footer
    addHeader: Add Header
    deletePage: Delete Page
    duplicatePage: Duplicate Page
    insertPage: Insert Page
    movePageBackward: Move Page Backward
    movePageForward: Move Page Forward
    pages: Pages
    removeFooter: Remove Footer
    removeHeader: Remove Header
    switchTheme: Switch Theme
    title: Report
  table:
    addDetails: Add Details
    addFooter: Add Footer
    addGroupFooter: Add Group Footer
    addGroupHeader: Add Group Header
    addHeader: Add Header
    cellsTitle: Cells
    columnTitle: Column
    delete: Delete
    deleteColumn: Delete Column
    deleteGroup: Delete Group
    deleteRow: Delete Row
    expression: Cell Expression
    groupTitle: Group
    insertColumn:
      left: Left
      right: Right
    insertColumnTitle: Insert Column
    insertGroup: Insert Group
    insertRow:
      above: Above
      below: Below
    insertRowTitle: Insert Row
    mergeCells: Merge Cells
    removeDetails: Remove Details
    removeFooter: Remove Footer
    removeGroupFooter: Remove Group Footer
    removeGroupHeader: Remove Group Header
    removeHeader: Remove Header
    rowTitle: Row
    splitCells: Split Cells
    title: Table
  tablix:
    addGroup:
      adjacentAfter: Adjacent After
      adjacentBefore: Adjacent Before
      child: Child
      column: Add Column Group
      parent: Parent
      row: Add Row Group
    addGroupTitle: Add Group
    addTotal:
      after: After
      before: Before
      contextMenuAfter: Add Total After
      contextMenuBefore: Add Total Before
    cellsTitle: Cells
    columnGroup: Column Group
    columnTitle: Column
    columnsRowsTitle: Columns & Rows
    delete: Delete
    deleteColumn: Delete Column
    deleteRow: Delete Row
    disableGroup: Disable Group
    enableGroup: Enable Group
    expression: Cell Expression
    insertColumn:
      insideGroupLeft: Inside Group - Left
      insideGroupRight: Inside Group - Right
      left: Left
      outsideGroupLeft: Outside Group - Left
      outsideGroupRight: Outside Group - Right
      right: Right
    insertColumnTitle: Insert Column
    insertRow:
      above: Above
      below: Below
      insideGroupAbove: Inside Group - Above
      insideGroupBelow: Inside Group - Below
      outsideGroupAbove: Outside Group - Above
      outsideGroupBelow: Outside Group - Below
    insertRowTitle: Insert Row
    mergeCells: Merge Cells
    rowGroup: Row Group
    rowTitle: Row
    splitCells: Split Cells
    totalTitle: Total
dataFieldPickerDropdown:
  noMatchingFieldsFound: No matching fields found
  searchPlaceholder: enter field name here...
  semantic:
    noMatchingAttributesRelationsFound: No matching items found
    searchPlaceholder: enter item name here...
dataPanel:
  addDataSet: Add Data Set...
  basedOnDataSource: "based on {dataSourceName}"
  commonValues:
    currentDateTime: Current Date and Time
    pageNM: Page N of M
    pageNMCumulative: Page N of M (Cumulative)
    pageNMSection: Page N of M (Section)
    pageNofMLabel: '"Page " & {pageNumber} & " of " & {totalPages}'
    pageNumber: Page Number
    pageNumberCumulative: Page Number (Cumulative)
    pageNumberSection: Page Number (Section)
    reportFolder: Report Folder
    reportName: Report Name
    totalPages: Total Pages
    totalPagesCumulative: Total Pages (Cumulative)
    totalPagesSection: Total Pages (Section)
    userContext: User Context
    userId: User ID
    userLanguage: User Language
  commonValuesLabel: Common Values
  constantsLabel: Constants
  dataSets:
    noMatchingFieldsFound: No matching fields found
    searchPlaceholder: enter field name here...
    semantic:
      editDataSet: Edit Data Set...
      loading: Loading...
      noMatchingAttributesRelationsFound: No matching attributes or relations found
      searchPlaceholder: enter attribute or relation name here...
  dataSetsLabel: Data Sets
  dataSourcesLabel: Data Sources
  datasetEditor:
    title:
      edit: 'Edit Data Set - "{datasetName}" based on "{datasourceName}"'
      editSemantic: 'Edit Data Set - "{datasetName}" based on "{modelName}" Model'
      new: 'New Data Set based on "{datasourceName}"'
    validate: Validate
    validating: Validating...
  editDataSet: Edit Data Set...
  editDataSource: Edit Data Source...
  editParameter: Edit Parameter
  fieldVariations:
    DateTime:
      - format: '=Year({fieldExpression})'
        label: Year
      - format: '=Year({fieldExpression}) & " Q" & DatePart("q", {fieldExpression})'
        label: Year-Quarter
      - format: '=Year({fieldExpression}) & " " & MonthName(Month({fieldExpression}))'
        label: Year-Month
      - format: '=Year({fieldExpression}) & " " & MonthName(Month({fieldExpression})) & " " & Day({fieldExpression})'
        label: Year-Month-Day
      - format: '=Year({fieldExpression}) & " W" & DatePart("ww", {fieldExpression})'
        label: Year-Week
      - format: '=DatePart("q", {fieldExpression})'
        label: Quarter
      - format: '=Month({fieldExpression})'
        label: Month
      - format: '=MonthName(Month({fieldExpression}))'
        label: MonthName
      - format: '=DatePart("ww", {fieldExpression})'
        label: Week
      - format: '=Day({fieldExpression})'
        label: Day
      - format: '=WeekdayName(Weekday({fieldExpression}))'
        label: DayOfWeek
  fieldsCountLabel: "{fieldsCount} fields"
  modelLabel: Model
  modelVersion: "Version: {version}"
  moveParameterDown: Move Down
  moveParameterUp: Move Up
  noDataSets: Report has no data sets
  noDataSources: Report has no data sources
  noParameters: Report has no parameters
  parametersLabel: Parameters
  selectFields: Select Fields...
  semantic:
    multipleAttributes: "{count} attributes"
    multipleRelations: "{count} relations"
    noAttributes: no attributes
    noRelations: no relations
    oneAttribute: 1 attribute
    oneRelation: 1 relation
  theme:
    color: Colors
    constant: Constants
    font: Fonts
    image: Images
    label: Theme
    majorFont: Major Font
    minorFont: Minor Font
dataVisualizerEditor:
  title: Data Visualizer
dialogs:
  cancel: Cancel
error:
  dataSetDialog:
    duplicateFields: "Query has duplicate fields: {fieldNames}"
    unexpectedError: Unexpected error
    validationTimeout: Query validation timed out
  errorLabel: Error
  expressionNode:
    argumentIsNotValid: "Argument '{argument}' of function '{functionName}' is not valid. {details}"
    argumentValueNotFitFunctionValueDataType: "Argument '{argument}' of function '{functionName}' should have one of the following types - {expectedTypes} - but has type {actualType}."
    argumentsShouldHaveSameDataType: "Arguments {arguments} of function '{functionName}' should have the same data type."
    typeMismatch: "Value '{value}' cannot be converted to {expectedType}."
  upgradeReportSemanticModel:
    entityIsAbsent: '● The entity ''{entityName}'' of the data set ''{dataSetName}'' is absent in the latest semantic model.'
    fieldAtQueryFilterIsAbsent: '● The field ''{fieldName}'' of the data set ''{dataSetName}'' query filter is absent in the latest semantic model.'
    fieldInControlGroupIsAbsent: '● The field ''{fieldName}'' in {controlName} group {groupName} ''{propertyLabel}'' property is absent in the latest semantic model.'
    fieldInControlIsAbsent: '● The field ''{fieldName}'' in {controlName} ''{propertyLabel}'' property is absent in the latest semantic model.'
    fieldInReportIsAbsent: '● The field ''{fieldName}'' in Report ''{propertyLabel}'' property is absent in the latest semantic model.'
expressionEditor:
  expressionLabel: Expression
  expressionPlaceholder: expression
  fields:
    commonValues:
      info:
        currentDateTime:
          description: Displays the current date and time. It can be used in the Page Header and Page Footer.
        pageNM:
          description: "Displays the current page number (N) and the total number of pages (M) in the format 'N of M'. It can be used in the Page Header and Page Footer."
        pageNMCumulative:
          description: Displays both the current page and the total number of cumulative pages in the report. Page N of M (Cumulative) is applied to page numbering when you use collation in the report.
        pageNMSection:
          description: "Displays the current page number (N) and the total number of pages (M) in the format 'N of M,' of the section to which the function belongs. The section can be a report or a data region."
        pageNumber:
          description: Displays the current page number. It can be used in the Page Header and Page Footer.
        pageNumberCumulative:
          description: Displays the current cumulative page number. Page Number (Cumulative) is applied to page numbering when you use collation in the report.
        pageNumberSection:
          description: Displays the current page number of the section to which the function belongs. The section can be a report or a data region.
        reportName:
          description: Displays the name of the report.
        totalPages:
          description: Displays the total number of pages. It can be used in the Page Header and Page Footer.
        totalPagesCumulative:
          description: Displays the total number of cumulative pages in the report. Total Pages (Cumulative) is applied to page numbering when you use collation in the report.
        totalPagesSection:
          description: Displays the total number of pages of the section to which the function belongs. The section can be a report or a data region.
        userContext:
          description: 'Use only with function, e.g. UserContext.GetValue("name"), UserContext.NumberToWords(123).'
        userId:
          description: Displays the User ID of the user previewing the report.
        userLanguage:
          description: Displays the Language of the user previewing the report as per system settings.
    constants:
      dvchart_template:
        PercentageCategory:p0:
          description: Displays the percentage of the Value field within the Category.
        PercentageDetail:p0:
          description: Displays the percentage of the Value field within the Details.
        categoryField:
          name:
            description: Displays the Category field name.
          value:
            description: Displays the Category field value.
        colorField:
          name:
            description: Displays the Color field name.
          value:
            description: Displays the Color field value.
        detailFields:
          name:
            description: Displays the Details field name.
          value:
            description: Displays the Details field value.
        shapeField:
          name:
            description: Displays the Shape field name.
          value:
            description: Displays the Shape field value.
        sizeField:
          name:
            description: Displays the Size field name.
          value:
            description: Displays the Size field value.
        valueField:
          name:
            description: Displays the Value field name.
          value:
            description: Displays the Value field value.
    documentMap:
      info:
        path:
          description: Returns the path of the TOC level.
          example: '=DocumentMap.Path & "This is Heading 1"'
          label: Path
      titles:
        label: Document Map
    functions:
      info:
        aggregate:
          aggregateIf:
            description: Calculates the aggregate of the values from the specified expression if the Boolean expression meets the given condition.
            example: '=AggregateIf(Fields!Discontinued.Value = True, "Sum", Fields!InStock.Value)'
            label: AggregateIf
            syntax: "AggregateIf(<Condition>, <AggregateFunction>, <AggregateArguments>)"
          aggregateIfWithScope:
            description: Calculates the aggregate of the values from the specified expression if the Boolean expression meets the given condition, within the specified scope.
            example: '=AggregateIf(Fields!Discontinued.Value = True, "Sum", Fields!InStock.Value, "Category")'
            label: AggregateIf (with scope)
            syntax: "AggregateIf(<Condition>, <AggregateFunction>, <AggregateArguments>, <Scope>)"
          avg:
            description: Calculates the average of all non-null numeric values from the specified expression.
            example: '=Avg(Fields!LifeExpentancy.Value)'
            label: Avg
            syntax: "Avg(<Values>)"
          avgWithScope:
            description: Calculates the average of all non-null numeric values from the specified expression within the specified scope.
            example: '=Avg(Fields!LifeExpentancy.Value, "GroupByCountry")'
            label: Avg (with scope)
            syntax: "Avg(<Values>, <Scope>)"
          count:
            description: Calculates the number of non-null values from the specified expression.
            example: '=Count(Fields!EmployeeID.Value)'
            label: Count
            syntax: "Count(<Values>)"
          countDistinct:
            description: Calculates the number of non-repeated values from the specified expression.
            example: '=CountDistinct(Fields!OrderID.Value)'
            label: CountDistinct
            syntax: "CountDistinct(<Values>)"
          countDistinctWithScope:
            description: Calculates the number of non-repeated values from the specified expression within the specified scope.
            example: '=CountDistinct(Fields!OrderID.Value, "GroupByCategory")'
            label: CountDistinct (with scope)
            syntax: "CountDistinct(<Values>, <Scope>)"
          countRows:
            description: Calculates the number of rows.
            example: '=CountRows()'
            label: CountRows
            syntax: CountRows()
          countRowsWithScope:
            description: Calculates the number of rows within the specified scope.
            example: '=CountRows("Title")'
            label: CountRows (with scope)
            syntax: "CountRows(<Scope>)"
          countWithScope:
            description: Calculates the number of non-null values from the specified expression within the specified scope.
            example: '=Count(Fields!EmployeeID.Value, "Title")'
            label: Count (with scope)
            syntax: "Count(<Values>, <Scope>)"
          cumulativeTotal:
            description: Calculates the sum of page-level aggregates returned by the expression for current and previous pages.
            example: '=CumulativeTotal(Fields!OrderID.Value, "Count")'
            label: CumulativeTotal
            syntax: "CumulativeTotal(<Expression>, <Aggregate>)"
          distinctSum:
            description: Calculates the sum of values from the specified expression when the value of the other expression is not repeated.
            example: '=DistinctSum(Fields!OrderID.Value, Fields!OrderFreight.Value)'
            label: DistinctSum
            syntax: "DistinctSum(<Values>, <Value>)"
          distinctSumWithScope:
            description: Calculates the sum of values of the specified expression when the value of the other expression is not repeated, within the specified scope.
            example: '=DistinctSum(Fields!OrderID.Value, Fields!OrderFreight.Value, "Order")'
            label: DistinctSum (with scope)
            syntax: "DistinctSum(<Values>, <Value>, <Scope>)"
          first:
            description: Returns the first value from the specified expression.
            example: '=First(Fields!ProductNumber.Value)'
            label: First
            syntax: "First(<Values>)"
          firstWithScope:
            description: Returns the first value from the specified expression within the specified scope.
            example: '=First(Fields!ProductNumber.Value, "Category")'
            label: First (with scope)
            syntax: "First(<Values>, <Scope>)"
          last:
            description: Returns the last value from the specified expression.
            example: '=Last(Fields!ProductNumber.Value)'
            label: Last
            syntax: "Last(<Values>)"
          lastWithScope:
            description: Returns the last value from the specified expression within the specified scope.
            example: '=Last(Fields!ProductNumber.Value, "Category")'
            label: Last (with scope)
            syntax: "Last(<Values>, <Scope>)"
          max:
            description: Returns the maximum non-null value from the specified expression.
            example: '=Max(Fields!OrderTotal.Value)'
            label: Max
            syntax: "Max(<Values>)"
          maxWithScope:
            description: Returns the maximum non-null value from the specified expression within the specified scope.
            example: '=Max(Fields!OrderTotal.Value, "Year")'
            label: Max (with scope)
            syntax: "Max(<Values>, <Scope>)"
          median:
            description: Returns the value that is the mid-point of the values in the specified expression. Median is the center value in a sequence of values.
            example: '=Median(Fields!OrderTotal.Value)'
            label: Median
            syntax: "Median(<Values>)"
          medianWithScope:
            description: Returns the value that is the mid-point of the ordered values in the specified expression, within the specified scope. Median is the center value in a sequence of values.
            example: '=Median(Fields!OrderTotal.Value, "Year")'
            label: Median (with scope)
            syntax: "Median(<Values>, <Scope>)"
          min:
            description: Returns the minimum non-null value from the specified expression.
            example: '=Min(Fields!OrderTotal.Value)'
            label: Min
            syntax: "Min(<Values>)"
          minWithScope:
            description: Returns the minimum non-null value from the specified expression within the specified scope.
            example: '=Min(Fields!OrderTotal.Value, "Year")'
            label: Min (with scope)
            syntax: "Min(<Values>, <Scope>)"
          mode:
            description: Returns the most frequently occurring value from the specified expression.
            example: '=Mode(Fields!OrderTotal.Value)'
            label: Mode
            syntax: "Mode(<Values>)"
          modeWithScope:
            description: Returns the most frequently occurring value from the specified expression, within the specified scope.
            example: '=Mode(Fields!OrderTotal.Value, "Year")'
            label: Mode (with scope)
            syntax: "Mode(<Values>, <Scope>)"
          runningValue:
            description: Calculates a running aggregate of all non-null numeric values from the specified expression, using another aggregate function as a parameter.
            example: '=RunningValue(Fields!Price.Value, "Sum")'
            label: RunningValue
            syntax: "RunningValue(<Values>, <AggregateFunction>)"
          runningValueWithScope:
            description: Calculates a running aggregate of all non-null numeric values from the specified expression, using another aggregate function as a parameter, within the specified scope.
            example: '=RunningValue(Fields!Price.Value, "Sum", "Nwind")'
            label: RunningValue (with scope)
            syntax: "RunningValue(<Values>, <AggregateFunction>, <Scope>)"
          stDev:
            description: Calculates the standard deviation of all non-null values of the specified expression.
            example: '=StDev(Fields!LineTotal.Value)'
            label: StDev
            syntax: "StDev(<Values>)"
          stDevP:
            description: Calculates the population standard deviation of all non-null values of the specified expression.
            example: '=StDevP(Fields!LineTotal.Value)'
            label: StDevP
            syntax: "StDevP(<Values>)"
          stDevPWithScope:
            description: Calculates the population standard deviation of all non-null values of the specified expression within the specified scope.
            example: '=StDevP(Fields!LineTotal.Value, "Order")'
            label: StDevP (with scope)
            syntax: "StDevP(<Values>, <Scope>)"
          stDevWithScope:
            description: Calculates the standard deviation of all non-null values of the specified expression, within the specified scope.
            example: '=StDev(Fields!LineTotal.Value, "Nwind")'
            label: StDev (with scope)
            syntax: "StDev(<Values>, <Scope>)"
          sum:
            description: Calculates the sum of the values of the specified expression.
            example: '=Sum(Fields!Price.Value)'
            label: Sum
            syntax: "Sum(<Values>)"
          sumWithScope:
            description: Calculates the sum of the values of the specified expression within the specified scope.
            example: '=Sum(Fields!Price.Value, "Category")'
            label: Sum (with scope)
            syntax: "Sum(<Values>, <Scope>)"
          var:
            description: Calculates the variance (standard deviation squared) of all non-null values of the specified expression.
            example: '=Var(Fields!LineTotal.Value)'
            label: Var
            syntax: "Var(<Values>)"
          varP:
            description: Calculates the population variance (population standard variation squared) of all non-null values of the specified expression.
            example: '=VarP(Fields!LineTotal.Value)'
            label: VarP
            syntax: "VarP(<Values>)"
          varPWithScope:
            description: Calculates the population variance (population standard variation squared) of all non-null values of the specified expression, within the specified scope.
            example: '=VarP(Fields!LineTotal.Value, "Order")'
            label: VarP (with scope)
            syntax: "VarP(<Values>, <Scope>)"
          varWithScope:
            description: Calculates the variance (standard deviation squared) of all non-null values of the specified expression.
            example: '=Var(Fields!LineTotal.Value, "Order")'
            label: Var (with scope)
            syntax: "Var(<Values>, <Scope>)"
        conversion:
          format:
            description: Formats the value to the specified format.
            example: '=Format(Fields!OrderDate.Value, "dd MMM yyyy")'
            label: Format
            syntax: "Format(<Value>, <String>)"
          toBoolean:
            description: Converts the specified value to Boolean.
            example: '=ToBoolean(Fields!HouseOwnerFlag.Value)'
            label: ToBoolean
            syntax: "ToBoolean(<Value>)"
          toByte:
            description: Converts the specified value to Byte.
            example: '=ToByte(Fields!ProductNumber.Value)'
            label: ToByte
            syntax: "ToByte(<Value>)"
          toChar:
            description: Converts the specified value to Char.
            example: '=ToChar(Fields!OrderStatus.Value); =ToChar(“Hello”)'
            label: ToChar
            syntax: "ToChar(<Value>)"
          toDateTime:
            description: Converts the specified value to a Date and Time value.
            example: '=ToDateTime(Fields!SaleDate.Value); =ToDateTime("1 January, 2017")'
            label: ToDateTime
            syntax: "ToDateTime(<Value>)"
          toDecimal:
            description: Converts the specified value to Decimal.
            example: '=ToDecimal(Fields!Sales.Value)'
            label: ToDecimal
            syntax: "ToDecimal(<Value>)"
          toDouble:
            description: Converts the specified value to Double.
            example: '=ToDouble(Fields!AnnualSales.Value); =ToDouble(535.85 * .2691 * 67483)'
            label: ToDouble
            syntax: "ToDouble(<Value>)"
          toInt16:
            description: Converts the specified value to a 16-bit signed Integer.
            example: '=ToInt16(Fields!AnnualSales.Value); =ToInt16(535.85)'
            label: ToInt16
            syntax: "ToInt16(<Value>)"
          toInt32:
            description: Converts the specified value to a 32-bit signed Integer.
            example: '=ToInt32(Fields!AnnualSales.Value)'
            label: ToInt32
            syntax: "ToInt32(<Value>)"
          toInt64:
            description: Converts the specified value to a 64-bit signed Integer.
            example: '=ToInt64(Fields!AnnualSales.Value)'
            label: ToInt64
            syntax: "ToInt64(<Value>)"
          toSingle:
            description: Converts the specified value to a single-precision floating-point number.
            example: '=ToSingle(Fields!AnnualSales.Value); =ToSingle(15.857692134)'
            label: ToSingle
            syntax: "ToSingle(<Value>)"
          toStringDot:
            description: Converts the value to String in the specified format.
            example: '=Fields!OrderDate.Value.ToString("dd MMM yyyy")'
            label: .ToString
            syntax: "<Value>.ToString(<String>)"
          toStringKey:
            description: Converts the specified value to String.
            example: '=ToString(Fields!YearlyIncome.Value); =ToString(13.50)'
            label: ToString
            syntax: "ToString(<Value>)"
          toUInt16:
            description: Converts the specified value to a 16-bit unsigned Integer.
            example: '=ToUInt16(Fields!AnnualSales.Value)'
            label: ToUInt16
            syntax: "ToUInt16(<Value>)"
          toUInt32:
            description: Converts the specified value to a 32-bit unsigned Integer.
            example: '=ToUInt32(Fields!AnnualSales.Value)'
            label: ToUInt32
            syntax: "ToUInt32(<Value>)"
          toUInt64:
            description: Converts the specified value to a 64-bit unsigned Integer.
            example: '=ToUInt64(Fields!AnnualSales.Value)'
            label: ToUInt64
            syntax: "ToUInt64(<Value>)"
        customFunctions:
          getValue:
            description: 'Displays the user context value for specified property, e.g. "name","email".'
            example: '=UserContext.getValue("name")'
            label: GetUserValue
            syntax: "UserContext.getValue(<String>)"
          numberToWords:
            description: 'Converts the specified value to words. Single argument function uses the current language from the portal. A function with two arguments uses the language passed by the second argument(Supported cultures: "zh-cn", "en-us", "ja-jp"). '
            example: '=UserContext.NumberToWords(123.5); =UserContext.NumberToWords(981, "zh-CN")'
            label: NumberToWords
            syntax: "UserContext.NumberToWords(<Number>, <String>)"
        dateTime:
          addDays:
            description: Returns a date and time value that is a result of adding the date interval in days. The specified date interval can be negative.
            example: '=Fields!OrderDate.Value.AddDays(5)'
            label: AddDays
            syntax: "<DateTime>.AddDays(<Number>)"
          addHours:
            description: Returns a date and time value that is a result of adding the time interval in hours. The specified time interval can be negative.
            example: '=Fields!OrderDate.Value.AddHours(12)'
            label: AddHours
            syntax: "<DateTime>.AddHours(<Number>)"
          addMilliseconds:
            description: Returns a date and time value that is a result of adding the time interval in milliseconds. The specified time interval can be negative.
            example: '=Fields!OrderDate.Value.AddMilliseconds(500)'
            label: AddMilliseconds
            syntax: "<DateTime>.AddMilliseconds(<Number>)"
          addMinutes:
            description: Returns a date and time value that is a result of adding the time interval in minutes. The specified time interval can be negative.
            example: '=Fields!OrderDate.Value.AddMinutes(30)'
            label: AddMinutes
            syntax: "<DateTime>.AddMinutes(<Number>)"
          addMonths:
            description: Returns a date and time value that is a result of adding the date interval in months. The specified date interval can be negative.
            example: '=Fields!OrderDate.Value.AddMonths(2)'
            label: AddMonths
            syntax: "<DateTime>.AddMonths(<Number>)"
          addSeconds:
            description: Returns a date and time value that is a result of adding the time interval in seconds. The specified time interval can be negative.
            example: '=Fields!OrderDate.Value.AddSeconds(30)'
            label: AddSeconds
            syntax: "<DateTime>.AddSeconds(<Number>)"
          addYears:
            description: Returns a date and time value that is a result of adding the date interval in years. The specified date interval can be negative.
            example: '=Fields!OrderDate.Value.AddYears(3)'
            label: AddYears
            syntax: "<DateTime>.AddYears(<Number>)"
          dateAdd:
            description: Returns a date and time value that is the result of adding the interval to the date and time field of the specified unit.
            example: '=DateAdd("d", 5, Fields!SaleDate.Value); =DateAdd(DateInterval.Day, 5, Fields!SaleDate.Value)'
            label: DateAdd
            syntax: "DateAdd(<DateInterval>, <Number>, <DateTime>)"
          dateDiff:
            description: Returns the difference between the start date and time and end date and time of the specified unit.
            example: '=DateDiff("yyyy", Fields!SaleDate.Value, "1/1/2015"); =DateDiff(DateInterval.Year, Fields!SaleDate.Value, "1/1/2015")'
            label: DateDiff
            syntax: 'DateDiff(<DateInterval>, <DateTime1>, <DateTime2>[, <DayOfWeek>[, <WeekOfYear>]])'
          datePart:
            description: Returns the Integer value that represents the specified part of the given date.
            example: '=DatePart("m", Fields!SaleDate.Value)'
            label: DatePart
            syntax: 'DatePart(<DateInterval>, <DateTime>[, <FirstDayOfWeek>[, <FirstWeekOfYear>]])'
          dateSerial:
            description: "Returns a Date value that represents a specified year, month, and day, with the time information set to midnight (00:00:00)."
            example: '=DateSerial(DatePart("yyyy", Fields!SaleDate.Value) - 10, DatePart("m", Fields!SaleDate.Value) + 5, DatePart("d", Fields!SaleDate.Value) - 1)'
            label: DateSerial
            syntax: "DateSerial(<Year Number>, <Month Number>, <Day Number>)"
          dateString:
            description: Returns the String value that represents the current date in your system.
            example: '=DateString(); =DatePart("m", DateString())'
            label: DateString
            syntax: DateString()
          dateValue:
            description: "Returns a Date value that contains the information on date represented by a string, with the time set to midnight (00:00:00)."
            example: '=DateValue("December 12, 2015")'
            label: DateValue
            syntax: "DateValue(<StringDate>)"
          day:
            description: Returns an Integer value from 1 through 31 that represents the day of the month.
            example: '=Day(Fields!SaleDate.Value)'
            label: Day
            syntax: "Day(<DateTime>)"
          hour:
            description: Returns an Integer value from 0 through 23 that represents the hour of the day.
            example: '=Hour(Fields!SaleDate.Value)'
            label: Hour
            syntax: "Hour(<DateTime>)"
          minute:
            description: Returns an Integer value from 0 through 59 that represents the minute of the hour.
            example: '=Minute(Fields!SaleDate.Value)'
            label: Minute
            syntax: "Minute(<DateTime>)"
          month:
            description: Returns an Integer value from 1 through 12 that represents the month of the year.
            example: '=Month(Fields!SaleDate.Value)'
            label: Month
            syntax: "Month(<DateTime>)"
          monthName:
            description: Returns the name of the month specified in the date as a String.
            example: '=MonthName(Fields!MonthNumber.Value)'
            label: MonthName
            syntax: 'MonthName(<Month Number>[, <Abbreviate>])'
          now:
            description: Returns the current date and time in your system.
            example: '=Now()'
            label: Now
            syntax: Now()
          parse:
            description: Converts the specified string value to a date and time value.
            example: '=DateTime.Parse("01/01/1970")'
            label: DateTime.Parse
            syntax: 'DateTime.Parse(<String>[, <String>])'
          quarter:
            description: Returns an Integer value from 1 through 4 that represents the quarter of the year.
            example: '=Quarter(Fields!SaleDate.Value)'
            label: Quarter
            syntax: "Quarter(<DateTime>)"
          quarterName:
            description: Returns a String value that represents the quarter of the year.
            example: '=QuarterName(Fields!SaleDate.Value)'
            label: QuarterName
            syntax: "QuarterName(<DateTime>)"
          second:
            description: Returns an Integer value from 0 through 59 that represents the second of the minute.
            example: '=Second(Fields!SaleDate.Value)'
            label: Second
            syntax: "Second(<DateTime>)"
          timeOfDay:
            description: Returns a Date value containing the current time of day in your system.
            example: '=TimeOfDay()'
            label: TimeOfDay
            syntax: TimeOfDay()
          timeSerial:
            description: Returns a Date value that represents a specified hour, minute, and second, with the date information set relative to January 1 of the year 0001.
            example: '=TimeSerial(DatePart("h", Fields!SaleDate.Value), DatePart("n", Fields!SaleDate.Value), DatePart("s", Fields!SaleDate.Value))'
            label: TimeSerial
            syntax: "TimeSerial(<Hour Number>, <Minute Number>, <Second Number>)"
          timeString:
            description: Returns the String value that represents the current time of day in your system.
            example: '=TimeString()'
            label: TimeString
            syntax: TimeString()
          timeValue:
            description: Returns a Date value that contains the information on time represented by a string, with the date set to January 1 of the year 0001.
            example: '=TimeValue("15:25:45"); =TimeValue(Fields!SaleDate.Value)'
            label: TimeValue
            syntax: "TimeValue(<StringTime>)"
          timer:
            description: Returns a Double value that represents the number of seconds elapsed since midnight.
            example: '=Timer()'
            label: Timer
            syntax: Timer()
          today:
            description: Returns a Date value that contains the current date in your system.
            example: '=Today()'
            label: Today
            syntax: Today()
          weekday:
            description: Returns an Integer value that contains a number representing the day of the week.
            example: '=Weekday(Fields!SaleDate.Value, 0)'
            label: Weekday
            syntax: 'Weekday(<DateTime>[, <DayOfWeek>])'
          weekdayName:
            description: Returns a String value that contains the name of the specified weekday.
            example: '=WeekdayName(3, True, 0); =WeekDayName(DatePart("w", Fields!SaleDate.Value), True, 0)'
            label: WeekdayName
            syntax: 'WeekdayName(<WeekDay>[, <Abbreviate>[, <FirstDayOfWeek>]])'
          year:
            description: Returns an Integer value from 1 through 9999 representing the year.
            example: '=Year(Fields!SaleDate.Value)'
            label: Year
            syntax: "Year(<DateTime>)"
        inspection:
          dbNull:
            description: Allows checking whether a value is a DBNull value.
            example: '=IIF(Fields!Organization.Value is DBNull.Value, "<NULL>", Fields!Organization.Value)'
            label: DBNull.Value
            syntax: DBNull.Value
          isArray:
            description: Returns True if the expression can be evaluated as an array.
            example: '=IsArray(Parameters!Initials.Value)'
            label: IsArray
            syntax: "IsArray(<Expression>)"
          isDBNull:
            description: Returns True if the expression evaluates to a null.
            example: '=IsDBNull(Fields!MonthlySales.Value)'
            label: IsDBNull
            syntax: "IsDBNull(<Expression>)"
          isDate:
            description: Returns True if the expression represents a valid Date value.
            example: '=IsDate(Fields!BirthDate.Value); =IsDate("31/12/2010")'
            label: IsDate
            syntax: "IsDate(<Expression>)"
          isError:
            description: Returns True if the expression evaluates to an error.
            example: '=IsError(Fields!AnnualSales.Value = 80000)'
            label: IsError
            syntax: "IsError(<Expression>)"
          isNothing:
            description: Returns True if the expression evaluates to nothing.
            example: '=IsNothing(Fields!MiddleInitial.Value)'
            label: IsNothing
            syntax: "IsNothing(<Expression>)"
          isNumeric:
            description: Returns True if the expression can be evaluated as a number.
            example: '=IsNumeric(Fields!AnnualSales.Value)'
            label: IsNumeric
            syntax: "IsNumeric(<Expression>)"
        math:
          abs:
            description: Returns the absolute or positive value of a single-precision floating-point number.
            example: '=Abs(-5.5); =Abs(Fields!YearlyIncome.Value - 80000)'
            label: Abs
            syntax: "Abs(<Number>)"
          acos:
            description: Returns the angle whose cosine is the specified number.
            example: '=Acos(.5); =Acos(Fields!Angle.Value)'
            label: Acos
            syntax: "Acos(<Number>)"
          asin:
            description: Returns the angle whose sine is the specified number.
            example: '=Asin(.5); =Asin(Fields!Angle.Value)'
            label: Asin
            syntax: "Asin(<Number>)"
          atan:
            description: Returns the angle whose tangent is the specified number.
            example: '=Atan(.5); =Atan(Fields!Angle.Value)'
            label: Atan
            syntax: "Atan(<Number>)"
          atan2:
            description: Returns the angle whose tangent is the quotient of two specified numbers.
            example: '=Atan2(3,7); =Atan2(Fields!CoordinateY.Value, Fields!CoordinateX.Value)'
            label: Atan2
            syntax: "Atan2(<Number1>, <Number2>)"
          bigMul:
            description: Returns the multiplication of two 32-bit numbers.
            example: '=BigMul(4294967295,-2147483647); =BigMul(Fields!Int32Value.Value, Fields!Int32Value.Value)'
            label: BigMul
            syntax: "BigMul(<Number1>, <Number2>)"
          ceiling:
            description: Returns the smallest integer greater than or equal to the specified double-precision floating-point number.
            example: '=Ceiling(98.4331); =Ceiling(Fields!AnnualSales.Value / 6)'
            label: Ceiling
            syntax: "Ceiling(<Number>)"
          cos:
            description: Returns the smallest integer greater than or equal to the specified double-precision floating-point number.
            example: '=Cos(60)'
            label: Cos
            syntax: "Cos(<Number>)"
          cosh:
            description: Returns the hyperbolic cosine of the specified angle.
            example: '=Cosh(60)'
            label: Cosh
            syntax: "Cosh(<Number>)"
          e:
            description: Returns the value of E, which is 2.71828182845905.
            example: '=E * 2'
            label: E
            syntax: E
          exp:
            description: "Returns e raised to the specified power, where e is Euler's number. It is the inverse of the Log function."
            example: '=Exp(3); =Exp(Fields!IntegerCounter.Value)'
            label: Exp
            syntax: "Exp(<Number>)"
          fix:
            description: Returns the integer portion of a number.
            example: '=Fix(-7.15); =Fix(Fields!AnnualSales.Value / -5)'
            label: Fix
            syntax: "Fix(<Number>)"
          floor:
            description: Returns the largest integer less than or equal to the specified double-precision floating-point number.
            example: '=Floor(4.67); =Floor(Fields!AnnualSales.Value / 12)'
            label: Floor
            syntax: "Floor(<Number>)"
          ieeeRemainder:
            description: Returns the remainder after division of one number by another according to IEEE standards.
            example: '=IEEERemainder(9, 8)'
            label: IEEERemainder
            syntax: "IEEERemainder(<Number1>, <Number2>)"
          log:
            description: Returns the logarithm of the specified number.
            example: '=Log(20.5); =Log(Fields!NumberValue.Value)'
            label: Log
            syntax: "Log(<Number>)"
          log10:
            description: Returns the logarithm of the specified number to the base 10.
            example: '=Log10(20.5); =Log10(Fields!NumberValue.Value)'
            label: Log10
            syntax: "Log10(<Number>)"
          max:
            description: Returns the maximum non-null value from the specified expression.
            example: '=Max(Fields!OrderTotal.Value)'
            label: Max
            syntax: "Max(<Values>)"
          min:
            description: Returns the minimum non-null value from the specified expression.
            example: '=Min(Fields!OrderTotal.Value)'
            label: Min
            syntax: "Min(<Values>)"
          pi:
            description: Returns the value of PI, which is 3.14159265358979.
            example: '=2 * PI * Fields!Radius.Value'
            label: PI
            syntax: PI
          pow:
            description: Returns one number raised to the power of another number.
            example: '=Pow(Fields!Quantity.Value, 2)'
            label: Pow
            syntax: "Pow(<Number1>, <Number2>)"
          round:
            description: Returns the round-off of a decimal number to the nearest integer or to the nearest decimal number up to the specified digits.
            example: '=Round(12.456); =Round(Fields!AnnualSales.Value / 12.3)'
            label: Round
            syntax: "Round(<Number>)"
          sign:
            description: Returns a value indicating the sign of an 8-bit signed integer.
            example: '=Sign(Fields!AnnualSales.Value - 60000)'
            label: Sign
            syntax: "Sign(<Number>)"
          sin:
            description: Returns the sine of the specified number.
            example: '=Sin(60)'
            label: Sin
            syntax: "Sin(<Number>)"
          sinh:
            description: Returns the hyperbolic sine of the specified angle.
            example: '=Sinh(60)'
            label: Sinh
            syntax: "Sinh(<Number>)"
          sqrt:
            description: Returns the square root of the specified number.
            example: '=Sqrt(121)'
            label: Sqrt
            syntax: "Sqrt(<Number>)"
          tan:
            description: Returns the tangent of the specified number.
            example: '=Tan(60)'
            label: Tan
            syntax: "Tan(<Number>)"
          tanh:
            description: Returns the hyperbolic tangent of the specified angle.
            example: '=Tanh(60)'
            label: Tanh
            syntax: "Tanh(<Number>)"
          truncate:
            description: Removes the digits after decimal point without rounding-off, and returns the integer value.
            example: '=Truncate(Fields!UnitPrice.Value)'
            label: Truncate
            syntax: "Truncate(<Number>)"
        miscellaneous:
          getFields:
            description: "Returns an IDictionary<string,Field> object that contains the current contents of the Fields collection. Only valid when used within a data region. This function makes it easier to write code that deals with complex conditionals. To write the equivalent function without GetFields() would require passing each of the queried field values into the method which could be prohibitive when dealing with many fields."
            example: '=GetFields(); =Code.DisplayAccountID(GetFields())'
            label: GetFields
            syntax: GetFields()
          getLength:
            description: Returns the number of elements in the specified array.
            example: '=Parameters!MultiValueParameter.Value.GetLength(0)'
            label: GetLength
            syntax: "<Collection>.GetLength(<Number>)"
          inScope:
            description: Evaluates to true or false depending on whether the current value is in the specified scope.
            example: '=InScope("Order")'
            label: InScope
            syntax: "InScope(<Scope>)"
          item:
            description: "Returns an item by its name from Fields/Parameters/ReportItems."
            example: '=Fields.Item("Company Name").Name; =Parameters.Item("Parameter1").Name; =ReportItems.Item("TextBox1").Value'
            example_i11n: '{Fields.Item("Company Name").Name}; {Parameters.Item("Parameter1").Name}; {ReportItems.Item("TextBox1").Value}'
            label: Item
            syntax: '<Object | Record>.Item(<String>)'
          join:
            description: Returns a string that is a result of joining the elements of an array, using the specified delimiter between elements.
            example: '=Join(Parameters!MultiValueParameter.Value, ", ")'
            label: Join
            syntax: "Join(<Values>, <String>)"
          level:
            description: Returns a zero-based integer representing the current level of depth in a recursive hierarchy in the current scope. The first level in the hierarchy is 0.
            example: '=Level()'
            label: Level
            syntax: Level()
          levelWithScope:
            description: Returns a zero-based integer representing the current level of depth in a recursive hierarchy in the specified scope. The first level in the hierarchy is 0.
            example: '=Level("Order")'
            label: Level (with scope)
            syntax: "Level(<Scope>)"
          lookup:
            description: Returns the first matching value for the specified name from the dataset with name and value pairs.
            example: '=Lookup(Fields!ProductID.Value, Fields!ProductID.Value, Fields!Quantity.Value, "DataSet2")'
            label: Lookup
            syntax: "Lookup(<Source>, <Destination>, <Result>, <DataSet>)"
          lookupSet:
            description: "Returns the set of matching values for the specified name from the dataset that contains name/value pairs."
            example: '=LookupSet(Fields!ProductID.Value, Fields!ProductID.Value, Fields!Quantity.Value, "DataSet2")'
            label: LookupSet
            syntax: "LookupSet(<Source>, <Destination>, <Result>, <DataSet>)"
          previous:
            description: Calculates the value of the expression for the previous row of data.
            example: '=Previous(Fields!OrderID.Value)'
            label: Previous
            syntax: "Previous(<Value>)"
          rowNumber:
            description: Returns the running count of all the rows.
            example: '=RowNumber()'
            label: RowNumber
            syntax: RowNumber()
          rowNumberWithScope:
            description: Returns the running count of all the rows in the specified scope.
            example: '=RowNumber("OrderID")'
            label: RowNumber (with scope)
            syntax: "RowNumber(<Scope>)"
        programFlow:
          choose:
            description: Returns a value from a list of arguments.
            example: '=Choose(3, "10", "15", "20", "25")'
            label: Choose
            syntax: 'Choose(<Index>, <Value1>[, <Value2>,...[, <ValueN>]])'
          iif:
            description: Returns the first value if the expression evaluates to True, and the second value if the expression evaluates to False.
            example: '=IIF(Fields!AnnualSales.Value >= 80000, "Above Average", "Below Average")'
            label: IIF
            syntax: "IIF(<Condition>, <TruePart>, <FalsePart>)"
          partition:
            description: "Returns a string (in the form x : y) that represents the calculated range based on the specified interval containing the specified number. "
            example: '=Partition(1999, 1980, 2000, 10)'
            label: Partition
            syntax: "Partition(<Value>, <Start>, <End>, <Interval>)"
          switch:
            description: Returns the value of the first expression that evaluates to True among a list of expressions.
            example: '=Switch(Fields!FirstName.Value = "Abraham", "Adria", Fields!FirstName.Value = "Charelotte", "Cherrie")'
            label: Switch
            syntax: 'Switch(<Condition1>, <Value1>[, <Condition2>, <Value2>,...[, <ConditionN>, <ValueN>]])'
        text:
          contains:
            description: Returns True if the string contains the specified substring.
            example: '=Fields!ShipAddress.Value.Contains("street")'
            label: Contains
            syntax: "<String>.Contains(<String>)"
          endsWith:
            description: Returns True if the string ends with the specified substring.
            example: '=Fields!Description.Value.EndsWith("documents")'
            label: EndsWith
            syntax: "<String>.EndsWith(<String>)"
          inStr:
            description: Returns the start position of the first occurrence of the specified substring within the string.
            example: '=InStr(Fields!Description.Value, "documents")'
            label: InStr
            syntax: "InStr(<String>, <String>)"
          indexOf:
            description: Returns the index of the first occurrence of the specified substring within the string.
            example: '=Fields!Description.Value.IndexOf("documents")'
            label: IndexOf
            syntax: '<String>.IndexOf(<String>[, <Number>])'
          lastIndexOf:
            description: Returns the index of the last occurrence of the specified substring within the string.
            example: '=Fields!Description.Value.LastIndexOf("documents")'
            label: LastIndexOf
            syntax: '<String>.LastIndexOf(<String>[, <Number>])'
          replace:
            description: Replaces all the occurrences of the first specified substring with the second specified substring within the string.
            example: '=Fields!Description.Value.Replace("documents", "invoices")'
            label: Replace
            syntax: "<String>.Replace(<String>, <String>)"
          startsWith:
            description: Returns True if the string starts with the specified substring.
            example: '=Fields!Description.Value.StartsWith("Invoice")'
            label: StartsWith
            syntax: "<String>.StartsWith(<String>)"
          substring:
            description: Returns the substring at the specified position (zero-based) of the specified length.
            example: '=Fields!Description.Value.Substring(1, 10)'
            label: Substring
            syntax: "<String>.Substring(<Number>, <Number>)"
          toLower:
            description: Returns the specified string in lower case.
            example: '=Fields!ShipCountry.Value.ToLower()'
            label: ToLower
            syntax: "<String>.ToLower()"
          toUpper:
            description: Returns the specified string in upper case.
            example: '=Fields!ShipCountry.Value.ToUpper()'
            label: ToUpper
            syntax: "<String>.ToUpper()"
          trim:
            description: Returns the string after removing all the white-space characters from both the start and the end of the specified string.
            example: '=Parameters!Info.Value.Trim()'
            label: Trim
            syntax: "<String>.Trim()"
          trimEnd:
            description: Returns the string after removing all the white-space characters from the end of the specified string.
            example: '=Parameters!Info.Value.TrimEnd()'
            label: TrimEnd
            syntax: "<String>.TrimEnd()"
          trimStart:
            description: Returns the string after removing all the white-space characters from the start of the specified string.
            example: '=Parameters!Info.Value.TrimStart()'
            label: TrimStart
            syntax: "<String>.TrimStart()"
      titles:
        aggregate: Aggregate
        conversion: Conversion
        dateTime: Date & Time
        inspection: Inspection
        label: Common Functions
        math: Math
        miscellaneous: Miscellaneous
        programFlow: Program Flow
        text: Text
    operations:
      info:
        arithmetic:
          add:
            description: Evaluates the sum of two numbers or concatenates two strings.
            example: '=Fields!Quantity.Value + 2'
            label: +
            syntax: '<Value1> + <Value2>'
          divide:
            description: Divides two numbers (numerator by denominator) and returns the quotient as a floating-point number.
            example: '=Fields!AnnualSales.Value / 2'
            label: "/"
            syntax: "<Number1> / <Number2>"
          integerDivide:
            description: Divides two numbers and returns an integer result.
            example: '=Fields!AnnualSales.Value \ 2'
            label: \
            syntax: '<Number1> \ <Number2>'
          mod:
            description: Divides two numbers and returns the remainder.
            example: '=Fields!AnnualSales.Value Mod 12'
            label: Mod
            syntax: "<Number1> Mod <Number2>"
          multiply:
            description: Evaluates the multiplication of two numbers.
            example: '=Fields!Quantity.Value * 5'
            label: '*'
            syntax: '<Number1> * <Number2>'
          power:
            description: Raises a number to the power of another number.
            example: '=Fields!Quantity.Value ^ 2'
            label: ^
            syntax: '<Number1> ^ <Number2>'
          subtract:
            description: Evaluates the difference between two numbers or negates the value of a numeric expression.
            example: '=Fields!Quantity.Value - 2'
            label: -
            syntax: "<Number1> - <Number2>"
        bitShift:
          leftShift:
            description: Performs an arithmetic left shift on a bit pattern.
            example: '=Fields!RegionID.Value << 2'
            label: "<<"
            syntax: "<Number1> << <Number2>"
          rightShift:
            description: Performs an arithmetic right shift on a bit pattern.
            example: '=Fields!RegionID.Value >> 2'
            label: ">>"
            syntax: "<Number1> >> <Number2>"
        comparison:
          equal:
            description: Returns True if the left operand is equal to the right operand.
            example: '=Fields!AnnualSales.Value = 80000'
            label: '='
            syntax: '<Value1> = <Value2>'
          greaterThan:
            description: Returns True if the left operand is greater than the right operand.
            example: '=Fields!AnnualSales.Value > 80000'
            label: ">"
            syntax: "<Value1> > <Value2>"
          greaterThanOrEqual:
            description: Returns True if the left operand is greater than or equal to the right operand.
            example: '=Fields!AnnualSales.Value >= 80000'
            label: '>='
            syntax: '<Value1> >= <Value2>'
          is:
            description: Compares two object references and returns True if the left operand is identical to the right operand.
            example: '=Fields!FirstName.Value Is Fields!LastName.Value'
            label: Is
            syntax: "<Value1> Is <Value2>"
          like:
            description: Compares two strings and returns True if the left operand is the same as the right operand.
            example: '=Fields!FirstName.Value Like "A*"'
            label: Like
            syntax: "<String1> Like <String2>"
          lowerThan:
            description: Returns True if the left operand is less than the right operand.
            example: '=Fields!AnnualSales.Value < 80000'
            label: "<"
            syntax: "<Value1> < <Value2>"
          lowerThanOrEqual:
            description: Returns True if the left operand is less than or equal to the right operand.
            example: '=Fields!AnnualSales.Value <= 80000'
            label: '<='
            syntax: '<Value1> <= <Value2>'
          notEqual:
            description: Returns True if the left operand is not equal to the right operand.
            example: '=Fields!AnnualSales.Value <> 80000'
            label: "<>"
            syntax: "<Value1> <> <Value2>"
        concatenation:
          add:
            description: Evaluates the sum of two numbers or concatenates two strings.
            example: '=Fields!FirstName.Value + " " + Fields!LastName.Value'
            label: +
            syntax: '<String1> + <String2>'
          concat:
            description: Returns the string value of the concatenation of two expressions that individually evaluate to strings.
            example: '=Fields!FirstName.Value & " " & Fields!LastName.Value'
            example_i11n: '{FirstName & " " & LastName}'
            label: &
            syntax: "<String1> & <String2>"
        logicalBitwise:
          and:
            description: Returns the logical conjunction of two Boolean expressions, or the bitwise conjunction of two numeric expressions.
            example: '=(Fields!AnnualSales.Value > 80000) And (Fields!Quantity.Value > 5)'
            label: And
            syntax: "<Value1> And <Value2>"
          andAlso:
            description: Returns the logical conjunction of two Boolean expressions by skipping evaluation of the other expression if the evaluation of the first expression provides the result.
            example: '=(Fields!AnnualSales.Value > 80000) AndAlso (Fields!Quantity.Value > 1)'
            label: AndAlso
            syntax: "<Boolean1> AndAlso <Boolean2>"
          not:
            description: Returns the logical negation of a Boolean expression, or the bitwise negation of a numeric expression.
            example: '=Not (Fields!AnnualSales.Value > 80000)'
            label: Not
            syntax: "Not <Value>"
          or:
            description: Returns the logical disjunction of two Boolean expressions, or the bitwise disjunction of two numeric values.
            example: '=(Fields!AnnualSales.Value > 80000) Or (Fields!Quantity.Value > 5)'
            label: Or
            syntax: "<Value1> Or <Value2>"
          orElse:
            description: Returns the logical disjunction of two Boolean expressions by skipping evaluation of one expression if the evaluation of the other expression provides the result.
            example: '=(Fields!AnnualSales.Value > 80000) OrElse (Fields!Quantity.Value > 1)'
            label: OrElse
            syntax: "<Boolean1> OrElse <Boolean2>"
          xor:
            description: Returns a logical exclusion operation of two Boolean expressions, or a bitwise exclusion of two numeric expressions.
            example: '=(Fields!AnnualSales.Value > 80000) Xor (Fields!Quantity.Value) > 5'
            label: Xor
            syntax: "<Value1> Xor <Value2>"
      titles:
        arithmetic: Arithmetic
        bitShift: Bit Shift
        comparison: Comparison
        concatenation: Concatenation
        label: Operations
        logicalBitwise: "Logical/Bitwise"
  fieldsLabel: Fields
  infoPanel:
    constant: "Constant:"
    description: "Description:"
    example: "Example:"
    name: "Name:"
    syntax: "Syntax:"
  reportItems: Report Items
  saveLabel: Save
  title: "Expression Editor: {propertyLabel}"
filters:
  add: Add...
  addCriterion: Add Criterion
  addGroup: Add Group
  addItem: Add Item
  allOf: All Of
  anyOf: Any Of
  edit: Edit...
  expressionText: Expression...
  filterPanelText: Select a Data Region to edit its filters
  filtersText: Filters
  listItemsCount: "{itemsCount} items"
  newParameter: New Parameter
  operators:
    beginsWith: Begins With
    between: Between
    bottomN: Bottom N
    bottomPercent: Bottom Percent
    contains: Contains
    doesNotBeginWith: Does Not Begin With
    doesNotContain: Does Not Contain
    equalTo: Equal To
    greaterThan: Greater Than
    greaterThanOrEqualTo: Greater Than Or Equal To
    in: In
    lessThan: Less Than
    lessThanOrEqualTo: Less Than Or Equal To
    like: Like
    notEqualTo: Not Equal To
    notIn: Not In
    topN: Top N
    topPercent: Top Percent
  reset: Reset
groupEditor:
  addGroup:
    adjacentAfter: Adjacent After
    adjacentBefore: Adjacent Before
    child: Child
    parent: Parent
  addGroupLabel: Add Group
  addTotal:
    after: After
    before: Before
  addTotalLabel: Add Total
  advancedMode: Advanced Mode
  columnGroups: Column Groups
  deleteGroupLabel: Delete
  disableGroup: Disable Group
  editExpressionLabel: Edit Expression
  enableGroup: Enable Group
  hiddenStatic: (Static)
  rowGroups: Row Groups
  selectTablixLabel: Select a tablix to edit its groups
labels:
  bandedList: Banded List
  bandedListDetails: Details
  bandedListFooter: Footer
  bandedListGroup: Group
  bandedListHeader: Header
  barcode: Barcode
  body: Body
  bullet: Bullet
  chart: Chart
  checkbox: CheckBox
  container: Container
  dvchart: Chart
  dvchartAggregateEncoding: Aggregate Encoding
  dvchartAxis: Axis
  dvchartCategoryEncoding: Category Encoding
  dvchartColorLegend: Legend - Color
  dvchartDetailsEncoding: Details Encoding
  dvchartEncodingValue: Encoding Value
  dvchartFooter: Footer
  dvchartGlobalLegend: Global Legend
  dvchartHeader: Header
  dvchartLegend: Legend
  dvchartPlot: Plot
  dvchartPlotArea: Plot Area
  dvchartShapeLegend: Legend - Shape
  dvchartSizeLegend: Legend - Size
  dvchartValueAggregateEncoding: Value Aggregate Encoding
  dvchartXAxis: X Axis
  dvchartYAxis: Y Axis
  formattedText: Formatted Text
  gridColumn: Column
  gridRow: Row
  image: Image
  inputField: Input Field
  line: Line
  list: List
  overflowPlaceholder: Overflow Placeholder
  page: Page
  pageFooter: Page Footer
  pageHeader: Page Header
  pageSection: "Page Header/Footer"
  report: Report
  series: Series
  shape: Shape
  sparkline: Sparkline
  subreport: Subreport
  table: Table
  tableColumn: Column
  tableDetails: Details
  tableFooter: Footer
  tableGroup: Group
  tableHeader: Header
  tableOfContents: Table Of Contents
  tableOfContentsLevel: Level
  tableRow: Row
  tablix: Tablix
  tablixColumn: Column
  tablixMember: Tablix Member
  tablixRow: Row
  textbox: TextBox
  total: Total
nameTemplates:
  bandedList: BandedList
  bandedListGroup: Group
  barcode: Barcode
  bullet: Bullet
  calculatedField: CalculatedField
  categoryGroup: CategoryGroup
  chart: Chart
  checkbox: CheckBox
  columnGroup: ColumnGroup
  container: Container
  dataset: DataSet
  detailsGroup: DetailsGroup
  dvchart: Chart
  dvchartEncodingField: Field
  dvchartPlot: Plot
  field: Field
  fixedPage: FixedPage
  formattedText: FormattedText
  group: Group
  image: Image
  inputField: InputField
  layer: Layer
  line: Line
  list: List
  mailMergeField: Field
  overflowPlaceholder: OverflowPlaceholder
  parameter: Parameter
  reportParameter: Parameter
  rowGroup: RowGroup
  seriesGroup: SeriesGroup
  seriesValue: Value
  shape: Shape
  sparkline: Sparkline
  subreport: Subreport
  table: Table
  tableDetailsGroup: DetailsGroup
  tableGroup: TableGroup
  tableOfContents: TableOfContents
  tablix: Tablix
  textbox: TextBox
  tocLevel: Level
  unknown: Item
notifications:
  addReportItem:
    caption: "Report item of type '{reportItemType}' can't be added to {containerType}"
  convertTableForClient:
    text: '✘ Table ''{name}'' has invalid structure and has been converted to Tablix'
  deleteRowColumn:
    caption: "Cannot delete {rowColumn}"
    text: "{rowColumn} cannot be deleted because {itemType} '{itemName}' would have invalid size as a result."
  fixedPageSize:
    caption: Action can not be performed
    text: Report item could not exceed page size
  fplPasteFailed:
    caption: Paste operation failed
    text: There is not enough space to paste report items
  innerException:
    caption: Inner exception occurred
  invalidPageSizes:
    caption: This action will result in invalid page sizes
  lockLayout:
    caption: Report layout is locked
    text: Resizing, moving, deleting, adding report items and changing layout properties is restricted.
  removeDefaultLayer:
    caption: "Default layer can't be removed"
  transaction:
    caption: "Transaction failed: {innerExceprion}"
parametersViewEditor:
  boundParameter:
    allowBlank: Allow Blank
    defaultValue: Default Value
    multiValue: Multi Value
    multiline: Multiline
    nullable: Nullable
    parameter: "{name} Parameter"
    text: Bound Parameter
  canvas: Canvas
  dataType:
    boolean: Boolean
    date: Date
    dateTime: DateTime
    float: Float
    integer: Integer
    string: String
  delete: Delete
  duplicate: Duplicate
  empty: "<Empty>"
  generateView: Generate View
  highlightRequired: Highlight Required
  labels:
    alignmentEnum:
      bottom: Bottom
      center: Center
      horizontal: Horizontal
      justify: Justify
      left: Left
      none: None
      right: Right
      top: Top
      vertical: Vertical
    binding: Binding
    bindingProperties:
      any: Any
      boolean: Boolean
      date: Date
      dateDateTime: Date, DateTime
      integerFloat: Integer, Float
    booleanEditor: Boolean Editor
    booleanParameter: Boolean Parameter
    booleanProperties:
      checkbox: Checkbox
      falseText: 'False'
      radio: Radio
      toggle: Toggle
      trueText: 'True'
      undefinedText: Undefined
    button: Button
    buttonProperties:
      clear: Clear
      preview: Preview
      reset: Reset
    checkRangeTypeText: Both parameters should have the same data type
    dateRangeEditor: Date Range Editor
    dateRangeParameter: DateRange Parameter
    dateRangeParameterLabels:
      monthYearOrder: M-Y
      placeholderDateEnd: End
      placeholderDateStart: Start
      shortcuts:
        labelLastMonth: Last month
        labelLastWeek: Last week
        labelLastYear: Last year
        labelMonthToDate: Month to date
        labelWeekToDate: Week to date
        labelYearToDate: Year to date
      tabLabelAnnually: Annually
      tabLabelDaily: Daily
      tabLabelMonthly: Monthly
      textBack: Back to Calendar
      textShortcutsList: Common Ranges
    dateTimeEditor: DateTime Editor
    dateTimeParameter: DateTime Parameter
    dateTimeParameterLabels:
      monthYearOrder: M-Y
      textBack: Back to Calendar
      textClear: Clear
      textToday: Today
    dateViewProperties:
      accent: Accent
      days: Days
      default: Default
      error: Error
      months: Months
      noData: no date
      none: None
      warning: Warning
      years: Years
    dropdownEditor: Dropdown Editor
    dropdownParameter: Dropdown Parameter
    fieldsProperties:
      addBtnText: Add
      addBtnTitle: Add Item
      closeBtnTitle: Close
      collectionIsEmpty: Collection is empty
      items: items
      showItem: Show Items
    heading: Heading
    headingText: Heading Text
    hierarchicalParameter: Hierarchical Parameter
    listEditor: List Editor
    listParameter: List Parameter
    locationAndSize: Location & Size
    multivalueParameter: Multi-value Parameter
    nullText: 'Null'
    numberEditor: Number Editor
    numberParameter: Number Parameter
    numberRangeParameter: NumberRange Parameter
    numberReangeEditor: Number Range Editor
    plainText: Plain Text
    properties:
      action: Action
      alignment: Alignment
      background: Background
      color: Color
      columns: Columns
      common: Common
      daysHeaderFormat: Days Header Format
      details: Details
      display: Display
      dropdown: Dropdown
      falseText: '"False" text'
      fields: Fields
      from: From
      groupBy: Group By
      height: Height
      label: Label
      layout: Layout
      left: Left
      list: List
      max: Max
      maxRange: Max Range
      min: Min
      mode: Mode
      multiValue: Multi Value
      multiline: Multiline
      pathString: Path String
      recursive: Recursive
      roundInputToStep: Round Input To Step
      slider: Slider
      step: Step
      strikethrough: Strikethrough
      text: Text
      to: To
      top: Top
      trueText: '"True" text'
      type: Type
      upDownEditor: Up-Down Editor
      value: Value
      viewMode: View Mode
      width: Width
    propertyGrid:
      closeSearchBtn: Close
      emptyListPlaceholder: Select an item to see properties
      gridSearchPlaceholder: enter property name here...
      noCommonProperties: There are no common properties
      textUnknownProperty: "Unknown Property:"
    removeDefaultValue: Remove Default Value
    singleLineParameter: Single-Line Parameter
    textEditor: Text Editor
    treeView: Tree View
    unspecified: Unspecified
  msgString:
    controlNotSupportParameters: "This control doesn't support parameters with available values defined"
    controlRequires: This control requires a list of available values
    notSupControl: is not supported by this control
  multipleValues: "<Multiple Values>"
  propertiesText: Properties
  removeView: Remove View
  resetView: Reset View
  surface:
    autoGenerate: Auto-Generate
    emptySurfaceBlock:
      descriptionButtonAfter: it from available parameters, or have a fresh start with the controls from the toolbox.
      descriptionButtonBefore: You can
      descriptionOne: 'This report doesn`t have a custom parameters view.'
      descriptionTwo: You can create it using controls from the toolbox.
    generate: Generate
    messageBlock:
      descriptionButtonAfter: editors for them.
      descriptionButtonBefore: You can
      descriptionOne: Not all report parameters have been bound.
    scrollBar:
      messagesOne: 'Parameters will look this way when shown in the viewer`s sidebar.'
      messagesTwo: You can change the order by dragging components.
  title: Parameters
  verticalLayout: Vertical Layout
properties:
  categories:
    action: Action
    appearance: Appearance
    availableValues: Available Values
    background: Background
    backgroundAndBorders: Background & Borders
    bar: Bar Settings
    border: Border
    borderColor: Border Color
    borderRoundingRadius: Border Rounding Radius
    borderStyle: Border Style
    borderWidth: Border Width
    borders: Borders
    column: Column
    common: Common
    content: Content
    data: Data
    dataLabel: Data Label
    dataLabelText: Data Label Text
    defaultValue: Default Value
    dimensions: Dimensions
    documentMap: Document Map
    dvchartLabelBorder: Label Border
    dvchartLabelLine: Label Line
    dvchartLabelText: Label Text
    dvchartLegend: Legend
    dvchartLegendBackground: Legend Background
    dvchartLegendBorder: Legend Border
    dvchartLegendText: Legend Text
    dvchartLegendTitle: Legend Title
    dvchartPlotConfig: Config
    dvchartPlotEncodings: Encodings
    dvchartPlotStyle: Style
    dvchartPlotSymbols: Symbols
    fields: Fields
    fillStyle: Fill Style
    font: Font
    general: General
    grid: Grid Lines
    group: Group
    input: Input
    international: International
    labelStyle: Label Style
    labels: Labels
    layout: Layout
    line: Line
    majorGrid: Major Grid
    majorTicks: Major Ticks
    margins: Margins
    marker: Marker
    minorGrid: Minor Grid
    minorTicks: Minor Ticks
    misc: Misc
    noData: No Data
    options: Options
    pageSize: Page Size
    preview: Preview
    range: Range
    referenceLine: Reference Line
    scale: Scale
    seriesLineStyle: Series Line Style
    settings: Settings
    staticMembers: Static Members
    symbology: Symbology
    tableFooter: Footer
    tableHeader: Header
    targetDevice: Target Device
    targetStyle: Target Style
    text: Text
    threeDProperties: 3D properties
    tickStyle: Tick Style
    title: Title
    userSort: User Sort
    valueStyle: Value Style
    visibility: Visibility
  editors:
    axisCollection:
      propertiesTitle: Axis properties
    boolean:
      falseLabel: 'False'
      trueLabel: 'True'
    colorDropdown:
      theme: Theme Colors
      themeColors:
        base: "{colorKey}"
        darker25: '{colorKey} - 25% darker'
        darker50: '{colorKey} - 50% darker'
        lighter25: '{colorKey} - 25% lighter'
        lighter50: '{colorKey} - 50% lighter'
        lighter75: '{colorKey} - 75% lighter'
    common:
      disabled: Disabled
      enabled: Enabled
      expressionLabel: "<Expression>"
      noneLabel: "<None>"
    dataSetFieldCollection:
      dataFieldHeader: Data Field
      dataFieldPlaceholder: "<Data Field>"
      fieldHeader: Field Name
      fieldPlaceholder: "<Name>"
      valueHeader: Value
      valuePlaceholder: "<Value>"
    dataSetParameterCollection:
      nameHeader: Parameter Name
      namePlaceholder: "<Name>"
      valueHeader: Value
      valuePlaceholder: "<Value>"
    datasetQuery:
      placeholder: enter query here...
    dvchartEncodingCollection:
      aggregate:
        prefix: Aggregate
        propertiesTitle: Aggregate Properties
      color:
        valuesName: Show Values Names In Legend
      details:
        prefix: Details
        propertiesTitle: Details Properties
      fieldPlaceholder: "<Key>"
      value:
        prefix: Value
        propertiesTitle: Value Properties
      valuePlaceholder: "<Value>"
    dvchartTemplate:
      custom: "<Custom>"
    filter:
      label: "Filter {index}"
      labels:
        between: '[A] Between ([B], [C])'
        bottomN: '[A] BottomN [N]'
        bottomPercent: '[A] BottomPercent [N%]'
        equal: '[A] = [B]'
        greaterThan: '[A] > [B]'
        greaterThanOrEqual: '[A] >= [B]'
        in: '[A] In ([B1],..,[Bn])'
        lessThan: '[A] < [B]'
        lessThanOrEqual: '[A] <= [B]'
        like: '[A] Like [B]'
        notEqual: '[A] <> [B]'
        topN: '[A] TopN [N]'
        topPercent: '[A] TopPercent [N%]'
      propertiesTitle: Filter properties
      valuePlaceholder: "<Value>"
    format:
      $locale: en-US
      $localeCurrency: USD
      currency: Currency
      custom: (Custom)
      customFormatMask: '(###) ###-####'
      decimal: Decimal
      default: "<Default>"
      digitsLabel: "digits:"
      fixedPoint: Fixed-point
      fullDateShortTime: "Full date/short time"
      general: General
      generalDateLongTime: "General date/long time"
      generalDateShortTime: "General date/short time"
      hexadecimal: Hexadecimal
      longDate: Long date
      longTime: Long time
      monthDay: Month day
      number: Number
      percent: Percent
      scientific: Scientific
      shortDate: Short date
      shortTime: Short time
      yearMonth: Year month
    image:
      database: DATABASE
      embedded: EMBEDDED
      load: Load...
      loading: Loading...
      noDataFieldsFound: No data fields found
      noImagesFound: No images found
      remove: "Remove '{name}'..."
      shared: SHARED
    layerCollection:
      propertiesTitle: "Layer properties: {layerName}"
    mailMergeFieldsCollection:
      nameHeader: Field Name
      namePlaceholder: "<Name>"
      valueHeader: Value
      valuePlaceholder: "<Value>"
    marginsSizes:
      custom: (Custom)
      values:
        - _name: None
          cm:
            bottom: 0cm
            left: 0cm
            right: 0cm
            top: 0cm
          in:
            bottom: 0in
            left: 0in
            right: 0in
            top: 0in
        - _name: Narrow
          cm:
            bottom: 1.25cm
            left: 1.25cm
            right: 1.25cm
            top: 1.25cm
          in:
            bottom: 0.5in
            left: 0.5in
            right: 0.5in
            top: 0.5in
        - _name: Normal
          cm:
            bottom: 2.5cm
            left: 2.5cm
            right: 2.5cm
            top: 2.5cm
          in:
            bottom: 1in
            left: 1in
            right: 1in
            top: 1in
        - _name: Wide
          cm:
            bottom: 2.5cm
            left: 5cm
            right: 5cm
            top: 2.5cm
          in:
            bottom: 1in
            left: 2in
            right: 2in
            top: 1in
    pageSize:
      custom: (Custom)
      values:
        - _name: Letter
          cm:
            height: 27.9cm
            width: 21.6cm
          in:
            height: 11in
            width: 8.5in
        - _name: Tabloid
          cm:
            height: 43.2cm
            width: 27.9cm
          in:
            height: 17in
            width: 11in
        - _name: Legal
          cm:
            height: 35.6cm
            width: 21.6cm
          in:
            height: 14in
            width: 8.5in
        - _name: Executive
          cm:
            height: 26.7cm
            width: 18.4cm
          in:
            height: 10.5in
            width: 7.25in
        - _name: A3
          cm:
            height: 42cm
            width: 29.7cm
          in:
            height: 16.54in
            width: 11.69in
        - _name: A4
          cm:
            height: 29.7cm
            width: 21cm
          in:
            height: 11.69in
            width: 8.27in
        - _name: A5
          cm:
            height: 21cm
            width: 14.8cm
          in:
            height: 8.27in
            width: 5.83in
        - _name: A6
          cm:
            height: 14.8cm
            width: 10.5cm
          in:
            height: 5.83in
            width: 4.13in
        - _name: B4 (JIS)
          cm:
            height: 36.4cm
            width: 25.7cm
          in:
            height: 14.33in
            width: 10.12in
        - _name: B5 (JIS)
          cm:
            height: 25.7cm
            width: 18.2cm
          in:
            height: 10.12in
            width: 7.17in
        - _name: B6 (JIS)
          cm:
            height: 18.2cm
            width: 12.8cm
          in:
            height: 7.17in
            width: 5.04in
        - _name: B5 (ISO)
          cm:
            height: 25cm
            width: 17.6cm
          in:
            height: 9.84in
            width: 6.93in
    palette:
      customPaletteLabel: "<Custom>"
      extraPalettesHeader: Theme Palettes
      standardPalettesHeader: Standard Palettes
    parameterCollection:
      propertiesTitle: Parameter properties
    picker:
      dataVisualizerLabel: Data Visualizer...
      expressionLabel: Expression...
      resetLabel: Reset
    queryFilter:
      addItem: Add Item
      addParent: Add Parent
      chooseField: Select Attribute or Parameter
      chooseFunction: Select Function
      close: Close
      deleteItem: Delete Item
      deleteParent: Delete Parent
      dropdowns:
        functions:
          titles:
            aggregate: Aggregate
            conditional: Conditional
            conversion: Conversion
            dateTime: Date & Time
            logical: Logical
            math: Math
            miscellaneous: Miscellaneous
            operators: Operators
            text: Text
            userContext: User Context
        parameters:
          title: Parameters
      inputConstant: Input Constant
      noQueryFilters: No query filters
      queryFilterIsNotValid: "<Query filter is not valid. Please expand the editor and fix found issues.>"
      setFilter: Set Filter
      showItems: Show Items
      title: Query Filter
      valuePlaceHolder: "<Value>"
    reportParameter:
      fromQuery: From query
      label: Label
      nonQueried: Non-queried
      value: Value
    reports:
      loading: Loading...
      loadingError: "Error {status}: {statusText}"
    semanticPicker:
      dataVisualizerLabel: Data Visualizer...
      expressionLabel: Expression...
      resetLabel: Reset
      specifyDataSetLabel: Specify DataSet to see the list of available attributes
      warnings:
        groupingByAggregate: grouping by aggregate attributes is discouraged
        groupingIsDiscouraged: grouping by this attribute is discouraged
    simple:
      backgroundColor:
        label: Background Color
      borders:
        borderColor: Border Color
        borderStyle: Border Style
        borderWidth: Border Width
        borders: Borders
        sides:
          all: All
          bottom: Bottom
          left: Left
          reset: Reset
          right: Right
          top: Top
      common:
        expression: Expression...
        expressionCompactLabel: '< 𝑓 >'
        expressionLabel: "<Expression>"
      font:
        fontFamily: Font Family
        fontSize: Font Size
        fontStyle: Font Style
        fontWeight: Font Weight
        textColor: Text Color
        textDecoration: Text Decoration
    subreport:
      parameter: Parameter
      parameterNameHeader: Name
      parameterNamePlaceholder: "<Name>"
      parameterValueHeader: Value
      parameterValuePlaceholder: "<Value>"
    toggleState:
      collapsed: Collapsed
      expanded: Expanded
    validationErrors:
      enum:
        incorrect: "Enum value of type '{enumType}' should be one of the following: {enumValues}"
      expression:
        errorPosition: "at line {line}, column {column}"
        incorrect: Invalid expression
        parseError: "Syntax error: It is not possible to convert this interpolation syntax expression to rdl syntax"
        syntaxError: "Syntax error: unexpected token '{token}' {positionInfo}"
        unknownField: "Warning: unknown field name in '{token}' {positionInfo}"
        unknownParameter: "Warning: unknown parameter name in '{token}' {positionInfo}"
        unknownReportItem: "Warning: unknown report item name in '{token}' {positionInfo}"
        unknownThemeImage: "Warning: unknown theme image name in '{token}' {positionInfo}"
        warning: "Warning: unknown token '{token}' {positionInfo}"
      length:
        negative: Value should be greater than zero
        tooLarge: "Value should be lower than {max}"
        tooSmall: "Value should be greater than {min}"
        unit: "Valid units are 'cm', 'mm', 'in', 'pt', and 'pc'"
      mime_type:
        incorrect: "Image MIME Type is expected to match {wildcard}"
      number:
        nan: Value is not a number
        tooLarge: "Value should be lower than {max}"
        tooSmall: "Value should be greater than {min}"
      pattern: "Invalid expression. Literal expressions for this property must be of type '{type}'. {info}"
  labels:
    action:
      jumpToBookmark: Jump to Bookmark
      jumpToReport: Jump to Report
      jumpToUrl: Jump to URL
      parameters: Parameters
    bandedList:
      canGrow: Can Grow
      canShrink: Can Shrink
      consumeWhiteSpace: Consume White Space
      preventOrphanedFooter: Prevent Orphaned Footer
      preventOrphanedHeader: Prevent Orphaned Header
      printAtBottom: Print At Bottom
      repeatOnNewPage: Repeat On New Page
    barcode:
      barHeight: Bar Height
      captionGrouping: Caption Grouping
      captionLocation: Caption Location
      checksum: Checksum
      code49Options:
        groupNumber: Group Number
        grouping: Grouping
      dataMatrixOptions:
        ecc000_140SymbolSize: Ecc000_140 Symbol Size
        ecc200EncodingMode: Ecc200 Encoding Mode
        ecc200SymbolSize: Ecc200 Symbol Size
        eccMode: Ecc Mode
        encoding: Encoding
        fileIdentifier: File Identifier
        structureNumber: Structure Number
        structuredAppend: Structured Append
      ean128Fnc1Options:
        barAdjust: Bar Adjust
        moduleSize: Module Size
        resolution: Dpi
      gs1CompositeOptions:
        type: Composite Type
        value: Composite Value
      gs1QrCodeOptions:
        encoding: Encoding
        errorLevel: Error Level
        mask: Mask
        version: Version
      invalidBarcodeText: Invalid Barcode Text
      maxiCodeOptions:
        mode: Mode
      microPdf417Options:
        compactionMode: Compaction Mode
        fileId: File ID
        segmentCount: Segment Count
        segmentIndex: Segment Index
        version: Version
      microQrCodeOptions:
        encoding: Encoding
        errorLevel: Error Level
        mask: Mask
        version: Version
      narrowBarWidth: Narrow Bar Width
      nwRatio: NW Ratio
      nwRatio_help:
        text: Also known as the N dimension, this is a value defining the multiple of the ratio between the narrow and wide bars in symbologies that contain bars in only two widths.
      pdf417Options:
        columns: Columns
        errorCorrectionLevel: Error Correction Level
        rows: Rows
        type: PDF417 Type
      qrCodeOptions:
        connection: Connection
        connectionNumber: Connection Number
        encoding: Encoding
        errorLevel: Error Level
        mask: Mask
        model: Model
        version: Version
      quietZone: Quiet Zone
      rotation: Rotation
      rssExpandedStacked:
        rowCount: Row Count
      supplementOptions:
        barHeight: Supplement Bar Height
        captionLocation: Supplement Caption Location
        spacing: Supplement Spacing
        value: Supplement Value
      symbology: Type
      value: Value
    border:
      bottom: Bottom
      color: Color
      default: Default
      left: Left
      right: Right
      style: Style
      top: Top
      width: Width
    bullet:
      bestValue: Best Value
      interval: Interval
      labelFontColor: Font Color
      labelFontFamily: Font Family
      labelFontSize: Font Size
      labelFontStyle: Font Style
      labelFormat: Label Format
      orientation: Orientation
      range1Boundary: Range1 Boundary
      range2Boundary: Range2 Boundary
      showLabels: Show Labels
      targetLineColor: Color
      targetLineWidth: Line Width
      targetShape: Shape
      targetValue: Target Value
      tickMarks: Marks
      ticksLineColor: Color
      ticksLineWidth: Line Width
      value: Value
      valueColor: Value Color
      worstValue: Worst Value
    checkBox:
      checkAlignment: Check Alignment
      checked: Checked
      text: Text
    container:
      consumeWhiteSpace: Consume White Space
      gridMode: Grid Mode
      linkToChild: Link To Child
      pageBreak: Page Break
    data:
      dataElementName: Element Name
      dataElementOutput: Element Output
      dataElementStyle: Element Style
    dataRegion:
      dataSetName: Data Set Name
      dataSetParameters: Data Set Parameters
      dataSetParameters_help:
        text: Setting a parameter in the DataSetParameters property allows adding relationships for displaying data in nested data regions that are bound to different datasets.
      filters: Filters
      newSection: New Section
      noRowsMessage: Message
      overflowName: Overflow Name
      pageBreak: Page Break
      repeatToFill: Repeat To Fill
      sortExpressions: Sort Expressions
      throwIfPlaceHoldersEmpty: Throw If Placeholders Empty
    dataSet:
      accentSensitivity: Accent Sensitivity
      boundFields: Bound Fields
      calculatedFields: Calculated Fields
      caseSensitivity: Case Sensitivity
      collation: Collation
      commandType: Command Type
      fields: Fields
      filters: Filters
      kanatypeSensitivity: Kanatype Sensitivity
      name: Name
      parameters: Parameters
      query: Query
      widthSensitivity: Width Sensitivity
    dataSetParameter:
      name: Name
      value: Value
    dataVisualizer:
      colorScale:
        maximum: Maximum
        maximumColor: Maximum Color
        middle: Middle
        middleColor: Middle Color
        minimum: Minimum
        minimumColor: Minimum Color
        useMiddleColor: Use Middle Color
        value: Value
      dataBar:
        alternateColor: Alternate Color
        color: Color
        maximum: Maximum
        minimum: Minimum
        useAlternateColor: Use Alternate Color
        useAlternateColor_help:
          text: "If enabled, 'Alternate Color' will be used when 'Value' is less than 'Zero Value'"
        value: Value
        zeroValue: Zero Value
      gradient:
        color1: Color 1
        color2: Color 2
        gradientType: Gradient Type
      hatch:
        color1: Color 1
        color2: Color 2
        hatchStyle: Hatch Style
      iconSet:
        icon1Value: Icon 1 Value
        icon2Value: Icon 2 Value
        icon3Value: Icon 3 Value
        icon4Value: Icon 4 Value
        icon5Value: Icon 5 Value
        iconSet: Icon Set
      rangeBar:
        color: Color
        displayProgressIndicator: Display Progress Indicator
        length: Length
        maximum: Maximum
        minimum: Minimum
        progressIndicatorColor: Progress Indicator Color
        progressIndicatorLength: Progress Indicator Length
        startingValue: Starting Value
      visualizerType: Visualizer Type
    dimensions:
      bottom: Bottom
      endPointX: End Point X
      endPointY: End Point Y
      fixedHeight: Fixed Height
      fixedSize: Fixed Size
      fixedWidth: Fixed Width
      height: Height
      left: Left
      location: Location
      right: Right
      size: Size
      startPointX: Start Point X
      startPointY: Start Point Y
      top: Top
      width: Width
    dvchart:
      bar:
        bottomWidth: Bottom Width
        neckHeight: Neck Height
        overlap: Overlap
        topWidth: Top Width
        width: Width
      customPaletteColors: Custom Palette Colors
      legendHidden: Hidden
      legendOrientation: Orientation
      legendPosition: Position
      legendWrapping: Wrapping
      palette: Palette
      plotTemplate: Plot Template
      plotTemplateDropdown: Select...
      plots: Plots
    dvchartAxis:
      axisType: Axis Type
      gridLinesStyle: Grid Line Style
      labelAngle: Label Angle
      lineStyle: Line Style
      logBase: Log Base
      majorInterval: Major Interval
      max: Max
      min: Min
      minorInterval: Minor Interval
      origin: Origin
      overlappingLabels: Overlapping Labels
      plots: Plots
      position: Position
      reversed: Reversed
      scale: Scale Type
      showGridLines: Show Grid Lines
      showMajorGridLines: Major Grid Lines
      showMinorGridLines: Minor Grid Lines
      tickMarks: Tick Marks
      tickSize: Tick Size
      tickStyle: Tick Style
      title: Title
      visible: Visible
    dvchartEncoding:
      aggregateType: Aggregate
      excludeNulls: Exclude Nulls
      fieldType: Field Type
      fieldValue: Value
      group: Group
      sort: Sort Direction
      sortingAggregate: Sorting Aggregate
      sortingField: Sort Expression
      value: Values
    dvchartHeaderFooter:
      caption: Caption
      height: Height
    dvchartLegend:
      hidden: Hidden
      iconColor: Icon Color
      orientation: Orientation
      position: Position
      title: Title
    dvchartPlot:
      bar: Bar Lines
      category: Category
      categorySort: Category Sort Direction
      categorySortingAggregate: Category Sorting Aggregate
      categorySortingField: Category Sort Expression
      clippingMode: Clipping Mode
      color: Color
      colorAggregate: Color Aggregate
      details: Details
      innerRadius: Inner Radius
      lineAspect: Line Aspect
      lineColor: Line Color
      lineStyle: Line Style
      lineWidth: Line Width
      offset: Offset
      opacity: Opacity
      plotStyle: Plot Style
      radial: Radial
      shape: Shape
      shapeAggregate: Shape Aggregate
      showNulls: Show Nulls
      size: Size
      sizeAggregate: Size Aggregate
      startAngle: Start Angle
      swapAxes: Swap Axes
      sweep: Sweep
      symbolBackgroundColor: Background Color
      symbolOpacity: Symbol Opacity
      symbolShape: Symbol Shape
      symbolStyle: Symbol Style
      symbols: Show Symbols
      text: Text
      textBackgroundColorStyle: Background Color
      textConnectingLine: Connecting Line
      textLinePosition: Position
      textOffset: Offset
      textOverlappingLabels: Overlapping Labels
      textPosition: Position
      textTemplate: Template
      tooltip: Tooltip
      tooltipTemplate: Tooltip Template
      type: Plot Type
      values: Values
    dvchartPlotArea:
      axes: Axes
    dvchartValueEncoding:
      field:
        close: Close
        high: High
        low: Low
        lower: Lower
        open: Open
        upper: Upper
        value: Value
    filter:
      filterExpression: Filter Expression
      filterValues: Filter Values
      operator: Operator
      value: Value
    font:
      fontFamily: Font Family
      fontSize: Font Size
      fontStyle: Font Style
      fontWeight: Font Weight
    formattedText:
      encodeMailMergeFields: Encode Merge Fields
      html: Html
      mailMergeFields: Merge Fields
    fplReport:
      fixedElementName: Fixed Page Element Name
      fixedElementOutput: Fixed Page Element Output
    group:
      dataCollectionName: Data Collection Name
      dataElementName: Data Element Name
      dataElementOutput: Data Element Output
      documentMapLabel: Label
      filters: Filters
      groupExpressions: Group Expressions
      name: Name
      newSection: New Section
      pageBreak: Page Break
      pageBreakDisabled: Page Break Disabled
      parent: Parent
      printFooterAtBottom: Print Footer At Bottom
    image:
      backgroundRepeat: Repeat
      horizontalAlignment: Horizontal Alignment
      imageLabel: Image
      mimeType: MIME Type
      sizing: Image Sizing
      source: Source
      value: Value
      verticalAlignment: Vertical Alignment
    inputField:
      checkSize: Check Size
      checkStyle: Check Style
      checked: Checked
      fieldName: Field Name
      inputType: Type
      maxLength: Max Length
      multiline: Multiline
      password: Password
      readonly: Read-Only
      required: Required
      spellCheck: Spell-Check
      value: Value
    layer:
      designerLock: Designer Lock
      designerTransparency: Designer Transparency
      designerVisible: Designer Visible
      name: Name
      targetDevice:
        all: All
        export: Export
        paper: Paper
        screen: Screen
    line:
      endPoint: End Point
      lineColor: Line Color
      lineStyle: Line Style
      lineWidth: Line Width
      startPoint: Start Point
    list:
      consumeWhiteSpace: Consume White Space
      dataInstanceElementOutput: Data Instance Element Output
      dataInstanceName: Data Instance Name
      gridMode: Grid Mode
    margins:
      bottom: Bottom
      left: Left
      right: Right
      top: Top
    overflowPlaceHolder:
      overflowName: Overflow Name
    padding:
      bottom: Bottom
      left: Left
      right: Right
      top: Top
    pageSection:
      printOnFirstPage: Print On First Page
      printOnLastPage: Print On Last Page
    parameter:
      omit: Omit
      parametername: Parameter Name
      parameters: Parameters
      value: Value
    report:
      author: Author
      collateBy: Collate By
      columnSpacing: Column Spacing
      columns: Columns
      consumeContainerWhitespace: Consume White Space
      description: Description
      displayType: Display Type
      embeddedImages: Embedded Images
      language: Language
      layers: Layers
      level: Level
      levels: Levels
      marginsSizes: Sizes
      marginsStyle: Style
      numberingStyle: Numbering Style
      pageHeight: Page Height
      pageOrientation: Page Orientation
      pageSize: Page Size
      pageWidth: Page Width
      sizeType: Size Type
      source: Source
      startPageNumber: Start Page Number
      theme: Theme
      themes: Themes
    reportItem:
      actionType: Type
      bookmark: Bookmark
      keepTogether: Keep Together
      label: Label
      layerName: Layer Name
      name: Name
      pageName: Page Name
      style: Style
      toolTip: Tooltip
      visibility: Visibility
      zIndex: Z-Index
    reportParameter:
      allowBlankValue: Allow Blank Value
      allowNullValue: Allow Null Value
      dataSetName: Data Set Name
      dataType: Data Type
      hidden: Hidden
      label: Label
      labelField: Label Field
      multiline: Multiline
      multivalue: Multivalue
      name: Name
      parameterValues: Parameter Values
      prompt: Prompt
      selectAllValue: Select All Value
      selectAllValue_help:
        text: 'If specified, determines the value to be passed to parameter value in case "Select All" flag is set for multivalue parameter.'
      value: Value
      valueField: Value Field
      values: Values
    roundingRadius:
      bottomLeft: Bottom Left
      bottomRight: Bottom Right
      default: Default
      label: Rounding Radius
      topLeft: Top Left
      topRight: Top Right
    sparkline:
      fillColor: Fill Color
      gradientEndColor: Gradient End Color
      gradientStyle: Gradient Type
      lineColor: Line Color
      lineWidth: Line Width
      markerColor: Marker Color
      markerVisibility: Marker Visibility
      maximumColumnWidth: Maximum Width
      rangeFillColor: Fill Color
      rangeGradientEndColor: Gradient End Color
      rangeGradientStyle: Gradient Type
      rangeLowerBound: Lower Bound
      rangeUpperBound: Upper Bound
      rangeVisibility: Visibility
      seriesValue: Series Value
      sparklineType: Sparkline Type
    style:
      angle: Angle
      backgroundAndBorders: Background & Borders
      backgroundColor: Color
      backgroundGradientEndColor: Gradient End Color
      backgroundGradientType: Gradient Type
      backgroundImage: Image
      border: Border
      calendar: Calendar
      characterSpacing: Character Spacing
      color: Color
      corner: Corner
      direction: Direction
      font: Font
      format: Format
      headingLevel: Heading Level
      language: Language
      lineHeight: Line Height
      lineSpacing: Line Spacing
      maxLevel: Max Level
      minCondenseRate: Min Condense Rate
      minCondenseRate_help:
        text: Specifies the minimal rate of text horizontal shrinking in percentages. Should be between 10 and 100.
      numeralLanguage: Numeral Language
      numeralVariant: Numeral Variant
      padding: Padding
      shapeStyle: Shape Style
      shrinkToFit: Shrink To Fit
      textAlign: Text Align
      textDecoration: Text Decoration
      textIndent: Text Indent
      textJustify: Text Justify
      unicodeBiDi: Unicode BiDi
      verticalAlign: Vertical Align
      wrapMode: Wrap Mode
      writingMode: Writing Mode
    subreport:
      inheritStyleSheet: Inherit Style Sheet
      mergeTransactions: Merge Transactions
      reportName: Report Name
      reportParameters: Report Parameters
      substituteThemeOnSubreport: Substitute Theme On Subreport
    table:
      detailsDataCollectionName: Details Data Collection Name
      detailsDataElementName: Details Data Element Name
      detailsDataElementOutput: Details Data Element Output
      keepTogether: Keep Together
      preventOrphanedFooter: Prevent Orphaned Footer
      printAtBottom: Print At Bottom
      repeatOnNewPage: Repeat On New Page
    tablix:
      frozenColumns: Frozen Columns
      frozenRows: Frozen Rows
      groupsBeforeRowHeaders: Groups Before Row Headers
      layoutDirection: Layout Direction
      repeatColumnHeaders: Repeat Column Headers
      repeatRowHeaders: Repeat Row Headers
    tablixBodyCell:
      autoMergeMode: Auto Merge Mode
      autoMergeMode_help:
        text: Indicates whether two or more continuous cells in a column having the same content should be merged. It would work only for TextBox cell.
    tablixMember:
      groupEnabled: Enabled
      keepWithGroup: Keep With Group
      repeatOnNewPage: Repeat On New Page
    textbox:
      canGrow: Can Grow
      canShrink: Can Shrink
      initialToggleState: Initial Toggle State
      value: Value
    tocLevel:
      displayFillCharacters: Display Fill Character
      displayPageNumber: Display Page Number
      fillCharacter: Fill Character
      label: Label
    userSort:
      sortExpression: Sort Expression
      sortExpressionScope: Sort Expression Scope
      sortTarget: Sort Target
    visibility:
      hidden: Hidden
      toggleItem: Toggle Item
romLabels:
  chart: Chart
  dvchart: DV.Chart
  matrix: Matrix
  table: Table
  tablix: Tablix
tablixWizard:
  addDataSet: Please add a data set to your report at first.
  addValue: Please add at least a single value to create a Tablix.
  aggregate: Aggregate
  aggregates:
    avg: Avg
    count: Count
    max: Max
    min: Min
    none: None
    sum: Sum
  asRows: As Rows
  cannotEditInWizard: Tablix has complex structure and cannot be edited in Wizard. Please use Group Editor instead.
  collapsedGroups: Collapsed Groups
  columns: Column Groups
  dataSets: Data Sets
  delete: Delete
  expandCollapse: "Expand/Collapse Groups"
  format: Format
  formats:
    currency: Currency
    decimal: Decimal
    default: Default
    general: General
    number: Number
    percent: Percent
  frozenColumns: Frozen Columns
  frozenRows: Frozen Rows
  layoutDesign: Layout Design
  layoutOptions: Layout Options
  makeTablix:
    total: Total
    values: Values
  noDataSets: Report has no data sets.
  noFieldPlaceholder: no field
  noValues: There are no values specified.
  none: None
  openWizard: Open Tablix Wizard...
  organization: Organization
  rows: Row Groups
  showTotalsBeforeGroup: Show Totals before Groups
  showValuesAsRows: Show Values as Rows
  sorting: "Sorting: {sorting}"
  sortings:
    Ascending: Ascending
    Descending: Descending
    None: None
  steppedRowGroups: Stepped Row Groups
  styling: Styling
  subTotalsForColumns: Subtotals for Column Groups
  subTotalsForRows: Subtotals for Row Groups
  swap: Swap
  swapRowColumnGroups: "Swap Row/Column Groups"
  title: Tablix Wizard
  totals: Totals
  totalsForColumns: Totals for Column Groups
  totalsForRows: Totals for Row Groups
  userSortEnabled: Enable User Sort
  values: Values
  warning:
    changedStructure: Tablix Wizard cannot edit the Tablix as its structure has been changed.
    confirmReverting: Please confirm reverting to the previous Tablix state editable by Wizard.
    otherwiseCannotEdit: Otherwise, it will not be possible to continue editing within Tablix Wizard.
    quit: Quit
    revert: Revert
    title: Warning
warning:
  embeddedImage:
    badFile: "Selected file '{name}' is not an image."
    badFileType: "Selected file '{name}' ({type}) is not supported."
    badImageFile: "Selected image file '{name}' is invalid."
    badImageSize: "Selected image file '{name}' exceeds limit of {limit} MB."
  margins:
    caption: The specified margins cannot be set
    info: "- '{name}' cannot be greater than {value}."
    labels:
      bottom: Bottom Margin
      left: Left Margin
      right: Right Margin
      top: Top Margin
  pageSize:
    caption: The specified page size cannot be set
    info: "- '{name}' cannot be less than {value}."
    labels:
      height: Page Height
      width: Page Width

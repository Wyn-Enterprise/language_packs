[
	{
		"name": "Concat",
		"category": "Text",
		"description": "Returns the string that is the concatenation of two or more string values.",
		"signature": "Concat(string_value1, string_value2 [, string_valueN])",
		"parameters": [
			{
				"name": "string_value1",
				"value": "The first string to be concatenated."
			},
			{
				"name": "string_value2",
				"value": "The second string to be concatenated."
			},
			{
				"name": "*",
				"value": "The optional additional strings to be concatenated."
			}
		]
	},
	{
		"name": "Format",
		"category": "Text",
		"description": "Returns the value formatted with the specified format.",
		"signature": "Format(value, format)",
		"parameters": [
			{
				"name": "value",
				"value": "The string to format."
			},
			{
				"name": "format",
				"value": "The string specifying the syntax of the date or numeric format."
			}
		]
	},
	{
		"name": "Indexof",
		"category": "Text",
		"description": "Returns the starting position of the specified expression in the character string.",
		"signature": "Indexof(expressionToSearch, expressionToFind [,start_location ])",
		"parameters": [
			{
				"name": "expressionToSearch",
				"value": "The character expression, typically a column, to search."
			},
			{
				"name": "expressionToFind",
				"value": "The character expression to find."
			},
			{
				"name": "start_location",
				"value": "The optional character position to start searching for expressionToFind in expressionToSearch."
			}
		]
	},
	{
		"name": "IsNull",
		"category": "Text",
		"description": "Replaces null with the specified replacement value.",
		"signature": "IsNull(check_expression , replacement_value )",
		"parameters": [
			{
				"name": "check_expression",
				"value": "The expression to be checked for null."
			},
			{
				"name": "replacement_value",
				"value": "The expression to be returned if check_expression is null."
			}
		]
	},
	{
		"name": "Left",
		"category": "Text",
		"description": "Returns the specified number of characters counting from the left of the specified string.",
		"signature": "Left(character_expression , integer_expression )",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			},
			{
				"name": "integer_expression",
				"value": "The positive integer that specifies how many characters will be returned counting from the left of character_expression."
			}
		]
	},
	{
		"name": "Len",
		"category": "Text",
		"description": "Returns the number of characters of the specified string expression.",
		"signature": "Len(string_expression)",
		"parameters": [
			{
				"name": "string_expression",
				"value": "The string expression."
			}
		]
	},
	{
		"name": "Lower",
		"category": "Text",
		"description": "Returns the character expression with the uppercase character data converted to lowercase.",
		"signature": "Lower(character_expression)",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			}
		]
	},
	{
		"name": "Ltrim",
		"category": "Text",
		"description": "Returns the character expression with leading blanks removed.",
		"signature": "Ltrim(character_expression)",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			}
		]
	},
	{
		"name": "Replace",
		"category": "Text",
		"description": "Replaces all occurrences of a string with another string.",
		"signature": "Replace(string_expression, string_pattern, string_replacement)",
		"parameters": [
			{
				"name": "string_expression",
				"value": "The string expression to be searched. Can be a character or binary data type."
			},
			{
				"name": "string_pattern",
				"value": " The substring to be found. Cannot be an empty string."
			},
			{
				"name": "string_replacement",
				"value": "The replacement string."
			}
		]
	},
	{
		"name": "Replicate",
		"category": "Text",
		"description": "Repeats the string value the specified number of times.",
		"signature": "Replicate(string_expression ,integer_expression )",
		"parameters": [
			{
				"name": "string_expression",
				"value": "The string to replicate."
			},
			{
				"name": "integer_expression",
				"value": "The repeat count."
			}
		]
	},
	{
		"name": "Reverse",
		"category": "Text",
		"description": "Returns the reverse order of the string expression.",
		"signature": "Reverse(string_expression )",
		"parameters": [
			{
				"name": "string_expression",
				"value": "The string."
			}
		]
	},
	{
		"name": "Right",
		"category": "Text",
		"description": "Returns the right part of the string with the specified number of characters.",
		"signature": "Right(character_expression , integer_expression )",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			},
			{
				"name": "integer_expression",
				"value": "The positive integer that specifies how many characters of the character expression will be returned."
			}
		]
	},
	{
		"name": "Rtrim",
		"category": "Text",
		"description": "Returns the character expression after it removes trailing blanks.",
		"signature": "Rtrim(character_expression)",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			}
		]
	},
	{
		"name": "Substring",
		"category": "Text",
		"description": "Returns the part of the string with the specified length; starts at the specified index.",
		"signature": "Substring(expression,integer_start,integer_length)",
		"parameters": [
			{
				"name": "expression",
				"value": " The character string."
			},
			{
				"name": "integer_start",
				"value": "The positive integer that specifies the start index of characters to return."
			},
			{
				"name": "integer_length",
				"value": "The positive integer that specifies how many characters will be returned."
			}
		]
	},
	{
		"name": "Tostring",
		"category": "Text",
		"description": "Converts the value of this instance to its equivalent string representation.",
		"signature": "Tostring(string_value1)",
		"parameters": [
			{
				"name": "string_value1",
				"value": "The string to be converted."
			}
		]
	},
	{
		"name": "Trim",
		"category": "Text",
		"description": "Returns the character expression with leading and trailing blanks removed.",
		"signature": "Trim(character_expression)",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			}
		]
	},
	{
		"name": "Upper",
		"category": "Text",
		"description": "Returns the character expression with lowercase character data converted to uppercase.",
		"signature": "Upper(character_expression)",
		"parameters": [
			{
				"name": "character_expression",
				"value": "The character expression."
			}
		]
	},
	{
		"name": "DateAdd",
		"category": "Datetime",
		"description": "Returns the datetime value that results from adding the specified number (a signed integer) to the specified date part of the date.",
		"signature": "DateAdd(datepart , integer_number , date [, dateformat])",
		"parameters": [
			{
				"name": "datepart",
				"value": "The part of the date to add the specified number to. The valid values and abbreviations are year (yy, yyyy), quarter (qq, q), month (mm, m), dayofyear (dy, y), day (dd, d), week (wk, ww), weekday (dw), hour (hh), minute (mi, n), second (ss, s), and millisecond (ms)."
			},
			{
				"name": "integer_number",
				"value": " The number to be added."
			},
			{
				"name": "date",
				"value": "The expression of the datetime data type."
			},
			{
				"name": "dateformat",
				"value": "The optional output date format."
			}
		]
	},
	{
		"name": "Datediff",
		"category": "Datetime",
		"description": "Returns the difference (a signed integer) of the specified time interval between the specified start date and end date.",
		"signature": "Datediff ( datepart , startdate , enddate )",
		"parameters": [
			{
				"name": "datepart",
				"value": "The part of the date that is the time interval of the difference between the start date and end date. The valid values and abbreviations are day (dd, d), hour (hh), minute (mi, n), second (ss, s), and millisecond (ms)."
			},
			{
				"name": "startdate",
				"value": "The datetime expression of the start date."
			},
			{
				"name": "enddate",
				"value": " The datetime expression of the end date."
			}
		]
	},
	{
		"name": "Datefromparts",
		"category": "Datetime",
		"description": "Returns the datetime value for the specified year, month, and day.",
		"signature": "Datefromparts(integer_year, integer_month, integer_day)",
		"parameters": [
			{
				"name": "integer_year",
				"value": "The integer expression specifying the year."
			},
			{
				"name": "integer_month",
				"value": "The integer expression specifying the month."
			},
			{
				"name": "integer_day",
				"value": "The integer expression specifying the day."
			}
		]
	},
	{
		"name": "Datepart",
		"category": "Datetime",
		"description": "Returns a character string that represents the specified date part of the specified date.",
		"signature": "Datepart(datepart, date [,integer_datefirst])",
		"parameters": [
			{
				"name": "datepart",
				"value": " The part of the date to return. The valid values and abbreviations are year (yy, yyyy), quarter (qq, q), month (mm, m), dayofyear (dy, y), day (dd, d), week (wk, ww), weekday (dw), hour (hh), minute (mi, n), second (ss, s), millisecond (ms), microsecond (mcs), nanosecond (ns), TZoffset (tz), and ISO_WEEK (isowk,isoww)."
			},
			{
				"name": "date",
				"value": "The datetime string."
			},
			{
				"name": "integer_datefirst",
				"value": "The optional integer representing the first day of the week. The default is 7, Sunday."
			}
		]
	},
	{
		"name": "Eomonth",
		"category": "Datetime",
		"description": "Returns the last day of the month that contains the specified date with an optional offset.",
		"signature": "Eomonth(start_date [, integer_month_to_add ])",
		"parameters": [
			{
				"name": "start_date",
				"value": "The datetime expression specifying the date for which to return the last day of the month."
			},
			{
				"name": "integer_month_to_add",
				"value": " The optional integer expression specifying the number of months to add to start_date."
			}
		]
	},
	{
		"name": "GetDate",
		"category": "Datetime",
		"description": "Returns the current time stamp of the database system as a datetime value. This value is equal to CURRENT_TIMESTAMP and SYSDATETIME.",
		"signature": "GetDate()",
		"parameters": []
	},
	{
		"name": "GetUtcDate",
		"category": "Datetime",
		"description": "Returns the current time stamp of the database system formatted as a UTC datetime value. This value is equal to SYSUTCDATETIME.",
		"signature": "GetUtcDate()",
		"parameters": []
	},
	{
		"name": "Abs",
		"category": "Math",
		"description": "Returns the absolute (positive) value of the specified numeric expression.",
		"signature": "Abs(numeric_expression)",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": "The expression of an indeterminate numeric data type except for the bit data type."
			}
		]
	},
	{
		"name": "Acos",
		"category": "Math",
		"description": "Returns the arc cosine, the angle in radians whose cosine is the specified float expression. ",
		"signature": "Acos(float_expression )",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression that specifies the cosine of the angle to be returned. Values outside the range from -1 to 1 return null."
			}
		]
	},
	{
		"name": "Asin",
		"category": "Math",
		"description": "Returns the arc sine, the angle in radians whose sine is the specified float expression. ",
		"signature": "Asin(float_expression )",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression that specifies the sine of the angle to be returned. Values outside the range from -1 to 1 return null."
			}
		]
	},
	{
		"name": "Atan",
		"category": "Math",
		"description": "Returns the arc tangent, the angle in radians whose tangent is the specified float expression.",
		"signature": "Atan(float_expression )",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression that specifies the tangent of the angle to be returned."
			}
		]
	},
	{
		"name": "Atan2",
		"category": "Math",
		"description": "Returns the angle in radians between the positive x-axis and the ray from the origin to the point (y, x) where x and y are the values of the two specified float expressions.",
		"signature": "Atan2(float_expression1, float_expression2 )",
		"parameters": [
			{
				"name": "float_expression1",
				"value": "The float expression that is the y-coordinate."
			},
			{
				"name": "float_expression2",
				"value": "The float expression that is the x-coordinate."
			}
		]
	},
	{
		"name": "Ceiling",
		"category": "Math",
		"description": "Returns the smallest integer greater than or equal to the specified numeric expression.",
		"signature": "Ceiling(numeric_expression )",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": "The expression of an indeterminate numeric data type except for the bit data type."
			}
		]
	},
	{
		"name": "Cos",
		"category": "Math",
		"description": "Returns the trigonometric cosine of the specified angle in radians in the specified expression.",
		"signature": "Cos(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression of the specified angle in radians."
			}
		]
	},
	{
		"name": "Cot",
		"category": "Math",
		"description": "Returns the trigonometric cotangent of the angle in radians specified by float_expression.",
		"signature": "Cot(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression of the angle in radians."
			}
		]
	},
	{
		"name": "Degrees",
		"category": "Math",
		"description": "Returns the angle in degrees for the angle specified in radians.",
		"signature": "Degrees(numeric_expression )",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": "The angle in radians, an expression of an indeterminate numeric data type except for the bit data type."
			}
		]
	},
	{
		"name": "Exp",
		"category": "Math",
		"description": "Returns the exponential value of the specified float expression. For example, EXP(LOG(20)) is 20.",
		"signature": "Exp(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression."
			}
		]
	},
	{
		"name": "Floor",
		"category": "Math",
		"description": "Returns the largest integer less than or equal to the numeric expression.",
		"signature": "Floor(numeric_expression )",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": " The expression of an indeterminate numeric data type except for the bit data type."
			}
		]
	},
	{
		"name": "Log",
		"category": "Math",
		"description": "Returns the natural logarithm of the specified float expression.",
		"signature": "Floor(float_expression,[,base ])",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression."
			},
			{
				"name": "base",
				"value": "The optional integer argument that sets the base for the logarithm."
			}
		]
	},
	{
		"name": "Log10",
		"category": "Math",
		"description": "Returns the base-10 logarithm of the specified float expression.",
		"signature": "Log10(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The expression of type float."
			}
		]
	},
	{
		"name": "PI",
		"category": "Math",
		"description": "Returns the constant value of pi.",
		"signature": "PI()"
	},
	{
		"name": "Power",
		"category": "Math",
		"description": "Returns the value of the specified expression raised to the specified power.",
		"signature": "Power(float_expression, y)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression."
			},
			{
				"name": "y",
				"value": "The power to raise float_expression to."
			}
		]
	},
	{
		"name": "Radians",
		"category": "Math",
		"description": "Returns the angle in radians of the angle in degrees.",
		"signature": "Radians(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The degrees of the angle as a float expression."
			}
		]
	},
	{
		"name": "Rand",
		"category": "Math",
		"description": "Returns a pseudorandom float value from 0 through 1, exclusive.",
		"signature": "Rand(integer_seed)",
		"parameters": [
			{
				"name": "integer_seed",
				"value": "The optional integer expression that specifies the seed value. If seed is not specified, a seed value at random will be assigned."
			}
		]
	},
	{
		"name": "Round",
		"category": "Math",
		"description": "Returns the numeric value rounded to the specified length or precision. ",
		"signature": "Round(numeric_expression , integer_length [ ,function ])",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": " The expression of a numeric data type."
			},
			{
				"name": "integer_length",
				"value": "The precision to round the numeric expression to."
			},
			{
				"name": "function",
				"value": " The optional type of operation to perform. When the function parameter is omitted or has a value of 0 (default), numeric_expression is rounded. When a value other than 0 is specified, numeric_expression is truncated."
			}
		]
	},
	{
		"name": "Sign",
		"category": "Math",
		"description": "Returns the positive sign (1), 0, or negative sign (-1) of the specified expression.",
		"signature": "Sign(numeric_expression )",
		"parameters": [
			{
				"name": "numeric_expression",
				"value": "The expression of an indeterminate data type except for the bit data type."
			}
		]
	},
	{
		"name": "Sin",
		"category": "Math",
		"description": "Returns the trigonometric sine of the angle in radians.",
		"signature": "Sin(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The float expression specifying the angle in radians."
			}
		]
	},
	{
		"name": "Sqrt",
		"category": "Math",
		"description": "Returns the square root of the specified float value.",
		"signature": "Sqrt(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The expression of type float."
			}
		]
	},
	{
		"name": "Square",
		"category": "Math",
		"description": "Returns the square of the specified float value.",
		"signature": "Square(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The expression of type float."
			}
		]
	},
	{
		"name": "Tan",
		"category": "Math",
		"description": "Returns the tangent of the input expression.",
		"signature": "Tan(float_expression)",
		"parameters": [
			{
				"name": "float_expression",
				"value": "The expression of type float."
			}
		]
	}
]